"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformClassDeclaration = void 0;
var typescript_1 = __importDefault(require("typescript"));
var diagnostics_1 = require("../../classes/diagnostics");
var factory_1 = require("../../util/factory");
var buildGuardFromType_1 = require("../../util/functions/buildGuardFromType");
var getSuperClasses_1 = require("../../util/functions/getSuperClasses");
function transformClassDeclaration(state, node) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
    var _f, _g;
    var symbol = state.getSymbol(node);
    if (!symbol || !node.name)
        return state.transform(node);
    var classInfo = state.classes.get(symbol);
    if (!classInfo)
        return state.transform(node);
    var fields = [];
    fields.push(["identifier", state.getUid(node)]);
    fields.push(["flamework:isExternal", classInfo.isExternal]);
    var constructor = node.members.find(function (x) { return factory_1.f.is.constructor(x); });
    if (constructor) {
        var constructorDependencies = [];
        try {
            for (var _h = __values(constructor.parameters), _j = _h.next(); !_j.done; _j = _h.next()) {
                var param = _j.value;
                if (!factory_1.f.is.referenceType(param.type))
                    diagnostics_1.Diagnostics.error(param, "Expected type reference");
                var symbol_1 = state.getSymbol(param.type.typeName);
                var declaration = (_f = symbol_1 === null || symbol_1 === void 0 ? void 0 : symbol_1.getDeclarations()) === null || _f === void 0 ? void 0 : _f[0];
                if (!declaration)
                    diagnostics_1.Diagnostics.error(param, "Could not find declaration");
                constructorDependencies.push(state.getUid(declaration));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (constructor.parameters.length > 0) {
            fields.push(["flamework:dependencies", constructorDependencies]);
        }
    }
    if (node.heritageClauses) {
        var implementClauses = new Array();
        try {
            for (var _k = __values(node.heritageClauses), _l = _k.next(); !_l.done; _l = _k.next()) {
                var clause = _l.value;
                if (clause.token !== typescript_1.default.SyntaxKind.ImplementsKeyword)
                    continue;
                try {
                    for (var _m = (e_3 = void 0, __values(clause.types)), _o = _m.next(); !_o.done; _o = _m.next()) {
                        var type = _o.value;
                        if (!typescript_1.default.isIdentifier(type.expression))
                            continue;
                        var symbol_2 = state.getSymbol(type.expression);
                        var declaration = (_g = symbol_2 === null || symbol_2 === void 0 ? void 0 : symbol_2.declarations) === null || _g === void 0 ? void 0 : _g[0];
                        if (!declaration)
                            continue;
                        implementClauses.push(factory_1.f.string(state.getUid(declaration)));
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (implementClauses.length > 0) {
            fields.push(["flamework:implements", factory_1.f.array(implementClauses, false)]);
        }
    }
    var decorators = classInfo.decorators.filter(function (x) { return x.type === "WithNodes"; });
    var decoratorIds = new Array();
    var decoratorConfigs = new Map();
    try {
        for (var decorators_1 = __values(decorators), decorators_1_1 = decorators_1.next(); !decorators_1_1.done; decorators_1_1 = decorators_1.next()) {
            var decorator = decorators_1_1.value;
            var id = state.getUid(decorator.declaration);
            var config = decorator.isFlameworkDecorator
                ? generateFlameworkConfig(state, node, decorator, factory_1.f.is.object(decorator.arguments[0]) ? decorator.arguments[0] : factory_1.f.object([]))
                : factory_1.f.object({ type: "Arbitrary", arguments: decorator.arguments });
            decoratorIds.push(id);
            decoratorConfigs.set(id, config);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (decorators_1_1 && !decorators_1_1.done && (_d = decorators_1.return)) _d.call(decorators_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    fields.push(["flamework:decorators", decoratorIds]);
    try {
        for (var decoratorConfigs_1 = __values(decoratorConfigs), decoratorConfigs_1_1 = decoratorConfigs_1.next(); !decoratorConfigs_1_1.done; decoratorConfigs_1_1 = decoratorConfigs_1.next()) {
            var _p = __read(decoratorConfigs_1_1.value, 2), id = _p[0], config = _p[1];
            fields.push(["flamework:decorators." + id, config]);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (decoratorConfigs_1_1 && !decoratorConfigs_1_1.done && (_e = decoratorConfigs_1.return)) _e.call(decoratorConfigs_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    var importIdentifier = state.addFileImport(state.getSourceFile(node), "@flamework/core", "Reflect");
    var realFields = fields.map(function (_a) {
        var _b = __read(_a, 2), name = _b[0], value = _b[1];
        return factory_1.f.statement(factory_1.f.call(factory_1.f.field(importIdentifier, "defineMetadata"), [node.name, name, value]));
    });
    typescript_1.default.addSyntheticLeadingComment(realFields[0], typescript_1.default.SyntaxKind.SingleLineCommentTrivia, "(Flamework) " + node.name.text + " metadata");
    return __spreadArray([state.transform(factory_1.f.update.classDeclaration(node, node.name, node.members, undefined))], __read(realFields));
}
exports.transformClassDeclaration = transformClassDeclaration;
function calculateOmittedGuards(state, classDeclaration, customAttributes) {
    var e_6, _a, e_7, _b;
    var omittedNames = new Set();
    if (factory_1.f.is.propertyAssignmentDeclaration(customAttributes) && factory_1.f.is.object(customAttributes.initializer)) {
        try {
            for (var _c = __values(customAttributes.initializer.properties), _d = _c.next(); !_d.done; _d = _c.next()) {
                var prop = _d.value;
                if (factory_1.f.is.string(prop.name) || factory_1.f.is.identifier(prop.name)) {
                    omittedNames.add(prop.name.text);
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_6) throw e_6.error; }
        }
    }
    var type = state.typeChecker.getTypeAtLocation(classDeclaration);
    var property = type.getProperty("attributes");
    if (!property)
        return omittedNames;
    var superClass = getSuperClasses_1.getSuperClasses(state.typeChecker, classDeclaration)[0];
    if (!superClass)
        return omittedNames;
    var superType = state.typeChecker.getTypeAtLocation(superClass);
    var superProperty = superType.getProperty("attributes");
    if (!superProperty)
        return omittedNames;
    var attributes = state.typeChecker.getTypeOfSymbolAtLocation(property, classDeclaration);
    var superAttributes = state.typeChecker.getTypeOfSymbolAtLocation(superProperty, superClass);
    try {
        for (var _e = __values(superAttributes.getProperties()), _f = _e.next(); !_f.done; _f = _e.next()) {
            var name_1 = _f.value.name;
            var prop = state.typeChecker.getTypeOfPropertyOfType(attributes, name_1);
            var superProp = state.typeChecker.getTypeOfPropertyOfType(superAttributes, name_1);
            if (prop && superProp && superProp === prop) {
                omittedNames.add(name_1);
            }
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return omittedNames;
}
function updateAttributeGuards(state, node, properties) {
    var type = state.typeChecker.getTypeAtLocation(node);
    var baseComponent = state.symbolProvider.componentsFile.get("BaseComponent");
    var property = type.getProperty("attributes");
    if (!property || property.parent !== baseComponent)
        return;
    var attributesType = state.typeChecker.getTypeOfSymbolAtLocation(property, node);
    if (!attributesType)
        return;
    var attributes = properties.find(function (x) { return x.name && "text" in x.name && x.name.text === "attributes"; });
    var attributeGuards = buildGuardFromType_1.buildGuardsFromType(state, state.getSourceFile(node), attributesType);
    var omittedGuards = calculateOmittedGuards(state, node, attributes);
    var filteredGuards = attributeGuards.filter(function (x) { return !omittedGuards.has(x.name.text); });
    properties = properties.filter(function (x) { return x !== attributes; });
    if (factory_1.f.is.propertyAssignmentDeclaration(attributes) && factory_1.f.is.object(attributes.initializer)) {
        properties.push(factory_1.f.update.propertyAssignmentDeclaration(attributes, factory_1.f.update.object(attributes.initializer, __spreadArray(__spreadArray([], __read(attributes.initializer.properties)), __read(filteredGuards))), attributes.name));
    }
    else {
        properties.push(factory_1.f.propertyDeclaration("attributes", factory_1.f.object(filteredGuards)));
    }
    return properties;
}
function updateInstanceGuard(state, node, properties) {
    var type = state.typeChecker.getTypeAtLocation(node);
    var baseComponent = state.symbolProvider.componentsFile.get("BaseComponent");
    var property = type.getProperty("instance");
    if (!property || property.parent !== baseComponent)
        return;
    var superClass = getSuperClasses_1.getSuperClasses(state.typeChecker, node)[0];
    if (!superClass)
        return;
    var customGuard = properties.find(function (x) { return x.name && "text" in x.name && x.name.text === "instanceGuard"; });
    if (customGuard)
        return;
    var instanceType = state.typeChecker.getTypeOfSymbolAtLocation(property, node);
    if (!instanceType)
        return;
    var superType = state.typeChecker.getTypeAtLocation(superClass);
    var superProperty = superType.getProperty("instance");
    if (!superProperty)
        return;
    var superInstanceType = state.typeChecker.getTypeOfSymbolAtLocation(superProperty, superClass);
    if (!superInstanceType)
        return;
    if (!type.checker.isTypeAssignableTo(superInstanceType, instanceType)) {
        var guard = buildGuardFromType_1.buildGuardFromType(state, state.getSourceFile(node), instanceType);
        properties.push(factory_1.f.propertyDeclaration("instanceGuard", guard));
    }
    return properties;
}
function updateComponentConfig(state, node, properties) {
    var _a, _b;
    properties = (_a = updateAttributeGuards(state, node, properties)) !== null && _a !== void 0 ? _a : properties;
    properties = (_b = updateInstanceGuard(state, node, properties)) !== null && _b !== void 0 ? _b : properties;
    return properties;
}
function generateFlameworkConfig(state, node, decorator, config) {
    var properties = __spreadArray([], __read(config.properties));
    // Automatically generate component attributes
    if (decorator.name === "Component") {
        properties = updateComponentConfig(state, node, properties);
    }
    return factory_1.f.update.object(config, __spreadArray([factory_1.f.propertyDeclaration("type", decorator.name)], __read(properties)));
}
