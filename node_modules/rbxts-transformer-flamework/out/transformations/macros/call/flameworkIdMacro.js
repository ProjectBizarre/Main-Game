"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlameworkIdMacro = void 0;
var diagnostics_1 = require("../../../classes/diagnostics");
var factory_1 = require("../../../util/factory");
exports.FlameworkIdMacro = {
    getSymbol: function (state) {
        return state.symbolProvider.flamework.get("id");
    },
    transform: function (state, node) {
        var _a, _b;
        var typeArgument = (_a = node.typeArguments) === null || _a === void 0 ? void 0 : _a[0];
        if (!typeArgument)
            diagnostics_1.Diagnostics.error(node, "Expected type argument");
        var typeName = factory_1.f.is.referenceType(typeArgument)
            ? typeArgument.typeName
            : factory_1.f.is.queryType(typeArgument)
                ? typeArgument.exprName
                : diagnostics_1.Diagnostics.error(typeArgument !== null && typeArgument !== void 0 ? typeArgument : node, "Invalid type argument");
        var typeArgumentSymbol = state.getSymbol(typeName);
        var declaration = (_b = typeArgumentSymbol === null || typeArgumentSymbol === void 0 ? void 0 : typeArgumentSymbol.declarations) === null || _b === void 0 ? void 0 : _b[0];
        if (!declaration)
            diagnostics_1.Diagnostics.error(typeArgument, "Could not find declaration");
        return factory_1.f.string(state.getUid(declaration));
    },
};
