"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentMethodMacro = void 0;
var typescript_1 = __importDefault(require("typescript"));
var diagnostics_1 = require("../../../classes/diagnostics");
var factory_1 = require("../../../util/factory");
exports.ComponentMethodMacro = {
    getSymbol: function (state) {
        var symbols = state.symbolProvider;
        if (!symbols.components)
            return [];
        return [
            symbols.components.get("addComponent"),
            symbols.components.get("removeComponent"),
            symbols.components.get("getComponent"),
        ];
    },
    transform: function (state, node) {
        var _a, _b, _c, _d;
        var firstType = (_a = node.typeArguments) === null || _a === void 0 ? void 0 : _a[0];
        if (firstType) {
            if (!factory_1.f.is.referenceType(firstType))
                diagnostics_1.Diagnostics.error(firstType, "Expected type reference");
            var declaration = (_c = (_b = state.getSymbol(firstType.typeName)) === null || _b === void 0 ? void 0 : _b.declarations) === null || _c === void 0 ? void 0 : _c[0];
            if (!declaration)
                diagnostics_1.Diagnostics.error(firstType, "Could not find declaration");
            return factory_1.f.update.call(node, state.transform(node.expression), [
                node.arguments[0],
                factory_1.f.as(factory_1.f.string(state.getUid(declaration)), factory_1.f.keywordType(typescript_1.default.SyntaxKind.NeverKeyword)),
            ]);
        }
        else {
            var specifier = node.arguments[1];
            if (!specifier)
                diagnostics_1.Diagnostics.error(node, "No specifier found");
            var symbol = state.getSymbol(specifier);
            if (!symbol)
                diagnostics_1.Diagnostics.error(specifier, "Symbol could not be found");
            if (!state.classes.has(symbol))
                return state.transform(node);
            var declaration = (_d = symbol === null || symbol === void 0 ? void 0 : symbol.declarations) === null || _d === void 0 ? void 0 : _d[0];
            if (!declaration)
                diagnostics_1.Diagnostics.error(specifier, "Declaration could not be found");
            return factory_1.f.update.call(node, state.transform(node.expression), [
                node.arguments[0],
                factory_1.f.as(factory_1.f.string(state.getUid(declaration)), factory_1.f.keywordType(typescript_1.default.SyntaxKind.NeverKeyword)),
            ]);
        }
    },
};
