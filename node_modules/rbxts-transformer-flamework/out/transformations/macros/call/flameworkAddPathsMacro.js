"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlameworkAddPathsMacro = void 0;
var path_1 = __importDefault(require("path"));
var factory_1 = require("../../../util/factory");
var diagnostics_1 = require("../../../classes/diagnostics");
function getPathFromSpecifier(state, source, hostDir, specifier) {
    var _a;
    var sourceDir = path_1.default.dirname(source.fileName);
    var absolutePath = specifier.startsWith(".") ? path_1.default.join(sourceDir, specifier) : path_1.default.join(hostDir, specifier);
    var outputPath = state.pathTranslator.getOutputPath(absolutePath);
    return (_a = state.rojoResolver) === null || _a === void 0 ? void 0 : _a.getRbxPathFromFilePath(outputPath);
}
exports.FlameworkAddPathsMacro = {
    getSymbol: function (state) {
        return state.symbolProvider.flamework.get("addPaths");
    },
    transform: function (state, node) {
        var e_1, _a;
        if (!state.rojoResolver)
            diagnostics_1.Diagnostics.error(node, "addPaths was used but Rojo could not be resolved");
        var importId = state.addFileImport(state.getSourceFile(node), "@flamework/core", "Flamework");
        var convertedArguments = [];
        try {
            for (var _b = __values(node.arguments), _c = _b.next(); !_c.done; _c = _b.next()) {
                var arg = _c.value;
                if (!factory_1.f.is.string(arg))
                    diagnostics_1.Diagnostics.error(arg, "Expected string");
                var rbxPath = getPathFromSpecifier(state, state.getSourceFile(node), state.currentDirectory, arg.text);
                if (!rbxPath)
                    diagnostics_1.Diagnostics.error(arg, "Could not find rojo data");
                convertedArguments.push(factory_1.f.array(rbxPath.map(factory_1.f.string)));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return factory_1.f.call(factory_1.f.field(importId, "_addPaths"), convertedArguments);
    },
};
