"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkingPredictMacro = void 0;
var diagnostics_1 = require("../../../classes/diagnostics");
var factory_1 = require("../../../util/factory");
exports.NetworkingPredictMacro = {
    getSymbol: function (state) {
        var networking = state.symbolProvider.networkingImpl;
        if (!networking)
            return [];
        return [networking.getType("ClientHandler").get("predict")];
    },
    transform: function (state, node) {
        if (!state.config.obfuscation)
            return node;
        var _a = __read(node.arguments), eventName = _a[0], args = _a.slice(1);
        if (!eventName)
            diagnostics_1.Diagnostics.error(node, "Expected event name");
        if (!factory_1.f.is.string(eventName))
            diagnostics_1.Diagnostics.error(eventName, "Event name must be a string literal");
        return factory_1.f.update.call(node, node.expression, __spreadArray([state.obfuscateText(eventName.text, "remotes")], __read(args)));
    },
};
