"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestingPatchDependencyMacro = void 0;
var diagnostics_1 = require("../../../classes/diagnostics");
var factory_1 = require("../../../util/factory");
exports.TestingPatchDependencyMacro = {
    getSymbol: function (state) {
        return state.symbolProvider.flamework.getNamespace("Testing").get("patchDependency");
    },
    transform: function (state, node) {
        var _a, _b, _c;
        var firstType = (_a = node.typeArguments) === null || _a === void 0 ? void 0 : _a[0];
        if (!factory_1.f.is.referenceType(firstType))
            diagnostics_1.Diagnostics.error(node, "Expected type argument");
        var declaration = (_c = (_b = state.getSymbol(firstType.typeName)) === null || _b === void 0 ? void 0 : _b.declarations) === null || _c === void 0 ? void 0 : _c[0];
        if (!declaration)
            diagnostics_1.Diagnostics.error(firstType, "Declaration not found");
        var uid = state.getUid(declaration);
        return factory_1.f.update.call(node, node.expression, [node.arguments[0], uid]);
    },
};
