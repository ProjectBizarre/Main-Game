"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RojoResolver = exports.RbxPathParent = exports.NetworkType = exports.FileRelation = exports.RbxType = void 0;
var ajv_1 = __importDefault(require("ajv"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var lazy_1 = require("./util/lazy");
var constants_1 = require("./constants");
var arrayStartsWith_1 = require("./util/arrayStartsWith");
var warn_1 = require("./util/warn");
var isPathDescendantOf_1 = require("../../util/functions/isPathDescendantOf");
var ajv = new ajv_1.default();
var ROJO_FILE_REGEX = /^.+\.project\.json$/;
var ROJO_DEFAULT_NAME = "default.project.json";
var ROJO_OLD_NAME = "roblox-project.json";
var RbxType;
(function (RbxType) {
    RbxType[RbxType["ModuleScript"] = 0] = "ModuleScript";
    RbxType[RbxType["Script"] = 1] = "Script";
    RbxType[RbxType["LocalScript"] = 2] = "LocalScript";
    RbxType[RbxType["Unknown"] = 3] = "Unknown";
})(RbxType = exports.RbxType || (exports.RbxType = {}));
var SUB_EXT_TYPE_MAP = new Map([
    [constants_1.MODULE_SUBEXT, RbxType.ModuleScript],
    [constants_1.SERVER_SUBEXT, RbxType.Script],
    [constants_1.CLIENT_SUBEXT, RbxType.LocalScript],
]);
var DEFAULT_ISOLATED_CONTAINERS = [
    ["StarterPack"],
    ["StarterGui"],
    ["StarterPlayer"],
    ["StarterPlayer", "StarterPlayerScripts"],
    ["StarterPlayer", "StarterCharacterScripts"],
    ["StarterPlayer", "StarterCharacter"],
];
var CLIENT_CONTAINERS = [["StarterPack"], ["StarterGui"], ["StarterPlayer"]];
var SERVER_CONTAINERS = [["ServerStorage"], ["ServerScriptService"]];
var FileRelation;
(function (FileRelation) {
    FileRelation[FileRelation["OutToOut"] = 0] = "OutToOut";
    FileRelation[FileRelation["OutToIn"] = 1] = "OutToIn";
    FileRelation[FileRelation["InToOut"] = 2] = "InToOut";
    FileRelation[FileRelation["InToIn"] = 3] = "InToIn";
})(FileRelation = exports.FileRelation || (exports.FileRelation = {}));
var NetworkType;
(function (NetworkType) {
    NetworkType[NetworkType["Unknown"] = 0] = "Unknown";
    NetworkType[NetworkType["Client"] = 1] = "Client";
    NetworkType[NetworkType["Server"] = 2] = "Server";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
function stripRojoExts(filePath) {
    var ext = path_1.default.extname(filePath);
    if (ext === constants_1.LUA_EXT) {
        filePath = filePath.slice(0, -ext.length);
        var subext = path_1.default.extname(filePath);
        if (subext === constants_1.SERVER_SUBEXT || subext === constants_1.CLIENT_SUBEXT) {
            filePath = filePath.slice(0, -subext.length);
        }
    }
    else if (ext === constants_1.JSON_EXT) {
        filePath = filePath.slice(0, -ext.length);
    }
    return filePath;
}
var SCHEMA_PATH = path_1.default.join(constants_1.PACKAGE_ROOT, "rojo-schema.json");
var validateRojo = new lazy_1.Lazy(function () { return ajv.compile(JSON.parse(fs_extra_1.default.readFileSync(SCHEMA_PATH).toString())); });
function isValidRojoConfig(value) {
    return validateRojo.get()(value) === true;
}
exports.RbxPathParent = Symbol("Parent");
var RojoResolver = /** @class */ (function () {
    function RojoResolver() {
        this.rbxPath = new Array();
        this.partitions = new Array();
        this.filePathToRbxPathMap = new Map();
        this.isolatedContainers = __spreadArray([], __read(DEFAULT_ISOLATED_CONTAINERS));
        this.isGame = false;
    }
    RojoResolver.findRojoConfigFilePath = function (projectPath) {
        var e_1, _a;
        var defaultPath = path_1.default.join(projectPath, ROJO_DEFAULT_NAME);
        if (fs_extra_1.default.pathExistsSync(defaultPath)) {
            return defaultPath;
        }
        var candidates = new Array();
        try {
            for (var _b = __values(fs_extra_1.default.readdirSync(projectPath)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var fileName = _c.value;
                if (fileName !== ROJO_DEFAULT_NAME && (fileName === ROJO_OLD_NAME || ROJO_FILE_REGEX.test(fileName))) {
                    candidates.push(path_1.default.join(projectPath, fileName));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (candidates.length > 1) {
            warn_1.warn("Multiple *.project.json files found, using " + candidates[0]);
        }
        return candidates[0];
    };
    RojoResolver.fromPath = function (rojoConfigFilePath) {
        var resolver = new RojoResolver();
        resolver.parseConfig(path_1.default.resolve(rojoConfigFilePath), true);
        return resolver;
    };
    /**
     * Create a synthetic RojoResolver for ProjectType.Package.
     * Forces all imports to be relative.
     */
    RojoResolver.synthetic = function (basePath) {
        var resolver = new RojoResolver();
        resolver.parseTree(basePath, "", { $path: basePath }, true);
        return resolver;
    };
    RojoResolver.prototype.parseConfig = function (rojoConfigFilePath, doNotPush) {
        if (doNotPush === void 0) { doNotPush = false; }
        var realPath = fs_extra_1.default.realpathSync(rojoConfigFilePath);
        if (fs_extra_1.default.pathExistsSync(realPath)) {
            var configJson = void 0;
            try {
                configJson = JSON.parse(fs_extra_1.default.readFileSync(realPath).toString());
            }
            catch (e) { }
            if (isValidRojoConfig(configJson)) {
                this.parseTree(path_1.default.dirname(rojoConfigFilePath), configJson.name, configJson.tree, doNotPush);
            }
            else {
                warn_1.warn("RojoResolver: Invalid configuration! " + ajv.errorsText(validateRojo.get().errors));
            }
        }
        else {
            warn_1.warn("RojoResolver: Path does not exist \"" + rojoConfigFilePath + "\"");
        }
    };
    RojoResolver.prototype.parseTree = function (basePath, name, tree, doNotPush) {
        var e_2, _a;
        if (doNotPush === void 0) { doNotPush = false; }
        if (!doNotPush)
            this.rbxPath.push(name);
        if (tree.$path) {
            this.parsePath(path_1.default.resolve(basePath, tree.$path));
        }
        if (tree.$className === "DataModel") {
            this.isGame = true;
        }
        try {
            for (var _b = __values(Object.keys(tree).filter(function (v) { return !v.startsWith("$"); })), _c = _b.next(); !_c.done; _c = _b.next()) {
                var childName = _c.value;
                this.parseTree(basePath, childName, tree[childName]);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (!doNotPush)
            this.rbxPath.pop();
    };
    RojoResolver.prototype.parsePath = function (itemPath) {
        var realPath = fs_extra_1.default.pathExistsSync(itemPath) ? fs_extra_1.default.realpathSync(itemPath) : itemPath;
        if (path_1.default.extname(itemPath) === constants_1.LUA_EXT) {
            this.filePathToRbxPathMap.set(itemPath, __spreadArray([], __read(this.rbxPath)));
        }
        else {
            var isDirectory = fs_extra_1.default.pathExistsSync(realPath) && fs_extra_1.default.statSync(realPath).isDirectory();
            if (isDirectory && fs_extra_1.default.readdirSync(realPath).includes(ROJO_DEFAULT_NAME)) {
                this.parseConfig(path_1.default.join(itemPath, ROJO_DEFAULT_NAME), true);
            }
            else {
                this.partitions.unshift({
                    fsPath: itemPath,
                    rbxPath: __spreadArray([], __read(this.rbxPath)),
                });
                if (isDirectory) {
                    this.searchDirectory(itemPath);
                }
            }
        }
    };
    RojoResolver.prototype.searchDirectory = function (directory, item) {
        var e_3, _a, e_4, _b;
        var realPath = fs_extra_1.default.realpathSync(directory);
        var children = fs_extra_1.default.readdirSync(realPath);
        if (children.includes(ROJO_DEFAULT_NAME)) {
            this.parseConfig(path_1.default.join(directory, ROJO_DEFAULT_NAME));
            return;
        }
        if (item)
            this.rbxPath.push(item);
        try {
            // *.project.json
            for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var child = children_1_1.value;
                var childPath = path_1.default.join(directory, child);
                var childRealPath = fs_extra_1.default.realpathSync(childPath);
                if (fs_extra_1.default.statSync(childRealPath).isFile() && child !== ROJO_DEFAULT_NAME && ROJO_FILE_REGEX.test(child)) {
                    this.parseConfig(childPath);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            // folders
            for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {
                var child = children_2_1.value;
                var childPath = path_1.default.join(directory, child);
                var childRealPath = fs_extra_1.default.realpathSync(childPath);
                if (fs_extra_1.default.statSync(childRealPath).isDirectory()) {
                    this.searchDirectory(childPath, child);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (children_2_1 && !children_2_1.done && (_b = children_2.return)) _b.call(children_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (item)
            this.rbxPath.pop();
    };
    RojoResolver.prototype.getRbxPathFromFilePath = function (filePath) {
        var e_5, _a;
        filePath = path_1.default.resolve(filePath);
        var rbxPath = this.filePathToRbxPathMap.get(filePath);
        if (rbxPath) {
            return rbxPath;
        }
        try {
            for (var _b = __values(this.partitions), _c = _b.next(); !_c.done; _c = _b.next()) {
                var partition = _c.value;
                if (isPathDescendantOf_1.isPathDescendantOf(filePath, partition.fsPath)) {
                    var stripped = stripRojoExts(filePath);
                    var relativePath = path_1.default.relative(partition.fsPath, stripped);
                    var relativeParts = relativePath === "" ? [] : relativePath.split(path_1.default.sep);
                    if (relativeParts[relativeParts.length - 1] === constants_1.INIT_NAME) {
                        relativeParts.pop();
                    }
                    return partition.rbxPath.concat(relativeParts);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    RojoResolver.prototype.getRbxTypeFromFilePath = function (filePath) {
        var _a;
        var subext = path_1.default.extname(path_1.default.basename(filePath, path_1.default.extname(filePath)));
        return (_a = SUB_EXT_TYPE_MAP.get(subext)) !== null && _a !== void 0 ? _a : RbxType.Unknown;
    };
    RojoResolver.prototype.getContainer = function (from, rbxPath) {
        var e_6, _a;
        if (this.isGame) {
            if (rbxPath) {
                try {
                    for (var from_1 = __values(from), from_1_1 = from_1.next(); !from_1_1.done; from_1_1 = from_1.next()) {
                        var container = from_1_1.value;
                        if (arrayStartsWith_1.arrayStartsWith(rbxPath, container)) {
                            return container;
                        }
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (from_1_1 && !from_1_1.done && (_a = from_1.return)) _a.call(from_1);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
    };
    RojoResolver.prototype.getFileRelation = function (fileRbxPath, moduleRbxPath) {
        var fileContainer = this.getContainer(this.isolatedContainers, fileRbxPath);
        var moduleContainer = this.getContainer(this.isolatedContainers, moduleRbxPath);
        if (fileContainer && moduleContainer) {
            if (fileContainer === moduleContainer) {
                return FileRelation.InToIn;
            }
            else {
                return FileRelation.OutToIn;
            }
        }
        else if (fileContainer && !moduleContainer) {
            return FileRelation.InToOut;
        }
        else if (!fileContainer && moduleContainer) {
            return FileRelation.OutToIn;
        }
        else {
            // !fileContainer && !moduleContainer
            return FileRelation.OutToOut;
        }
    };
    RojoResolver.prototype.isIsolated = function (rbxPath) {
        return this.getContainer(this.isolatedContainers, rbxPath) !== undefined;
    };
    RojoResolver.prototype.getNetworkType = function (rbxPath) {
        if (this.getContainer(SERVER_CONTAINERS, rbxPath)) {
            return NetworkType.Server;
        }
        if (this.getContainer(CLIENT_CONTAINERS, rbxPath)) {
            return NetworkType.Client;
        }
        return NetworkType.Unknown;
    };
    RojoResolver.relative = function (rbxFrom, rbxTo) {
        var maxLength = Math.max(rbxFrom.length, rbxTo.length);
        var diffIndex = maxLength;
        for (var i = 0; i < maxLength; i++) {
            if (rbxFrom[i] !== rbxTo[i]) {
                diffIndex = i;
                break;
            }
        }
        var result = new Array();
        if (diffIndex < rbxFrom.length) {
            for (var i = 0; i < rbxFrom.length - diffIndex; i++) {
                result.push(exports.RbxPathParent);
            }
        }
        for (var i = diffIndex; i < rbxTo.length; i++) {
            result.push(rbxTo[i]);
        }
        return result;
    };
    RojoResolver.prototype.getPartitions = function () {
        return this.partitions;
    };
    return RojoResolver;
}());
exports.RojoResolver = RojoResolver;
