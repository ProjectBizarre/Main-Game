"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("typescript"));
var path_1 = __importDefault(require("path"));
var transformFile_1 = require("./transformations/transformFile");
var transformState_1 = require("./classes/transformState");
var logger_1 = require("./classes/logger");
var viewFile_1 = require("./information/viewFile");
var factory_1 = require("./util/factory");
var chalk_1 = __importDefault(require("chalk"));
var constants_1 = require("./classes/rojoResolver/constants");
function default_1(program, config) {
    return function (context) {
        if (logger_1.Logger.verbose)
            logger_1.Logger.write("\n");
        factory_1.f.setFactory(context.factory);
        var state = new transformState_1.TransformState(program, context, config !== null && config !== void 0 ? config : {});
        var hasCollectedInformation = false;
        var projectFlameworkVersion = state.buildInfo.getFlameworkVersion();
        if (projectFlameworkVersion !== constants_1.PKG_VERSION) {
            logger_1.Logger.writeLine("" + chalk_1.default.red("Project was compiled on different version of Flamework."), "Please recompile by deleting the " + path_1.default.relative(state.currentDirectory, state.outDir) + " directory", "Current Flamework Version: " + chalk_1.default.yellow(constants_1.PKG_VERSION), "Previous Flamework Version: " + chalk_1.default.yellow(projectFlameworkVersion));
            process.exit(1);
        }
        return function (file) {
            if (!typescript_1.default.isSourceFile(file)) {
                logger_1.Logger.writeLine("" + chalk_1.default.red("Failed to load! TS version mismatch detected"), "It is recommended that you use a local install of roblox-ts.", "You can install a local version using " + chalk_1.default.green("npm install -D roblox-ts"));
                process.exit(1);
            }
            if (!hasCollectedInformation) {
                hasCollectedInformation = true;
                state.symbolProvider.registerInterestingFiles();
                program.getSourceFiles().forEach(function (file) {
                    if (file.isDeclarationFile && !state.shouldViewFile(file))
                        return;
                    viewFile_1.viewFile(state, file);
                });
                state.setupMacros();
            }
            if (state.hasErrors)
                return file;
            var result = transformFile_1.transformFile(state, file);
            return result;
        };
    };
}
exports.default = default_1;
