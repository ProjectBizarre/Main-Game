"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils = __importStar(require("./utils"));
var fixesForFiles = [
    {
        filePath: '../TypeScript/src/tsconfig-library-base.json',
        fixes: [
            {
                orig: '"stripInternal":  true',
                new: '"stripInternal":  false'
            }
        ]
    },
    {
        filePath: '../TypeScript/src/services/refactors/extractSymbol.ts',
        fixes: [
            {
                orig: 'const enum Usage',
                new: 'export const enum Usage'
            },
            {
                orig: 'type RangeToExtract',
                new: 'export type RangeToExtract'
            },
            {
                orig: 'interface TargetRange',
                new: 'export interface TargetRange'
            },
            {
                orig: 'enum RangeFacts',
                new: 'export enum RangeFacts'
            },
        ],
    },
    {
        filePath: '../TypeScript/src/services/formatting/rulesMap.ts',
        fixes: [
            {
                orig: 'enum RulesPosition',
                new: 'export enum RulesPosition'
            }
        ]
    },
    {
        filePath: '../TypeScript/src/services/codefixes/annotateWithTypeFromJSDoc.ts',
        fixes: [
            {
                orig: 'type DeclarationWithType',
                new: 'export type DeclarationWithType'
            },
        ]
    },
    {
        filePath: '../TypeScript/src/services/codefixes/importFixes.ts',
        fixes: [
            {
                orig: 'const enum ImportKind',
                new: 'export const enum ImportKind'
            },
        ]
    },
    {
        filePath: '../TypeScript/src/services/symbolDisplay.ts',
        fixes: [
            {
                orig: 'interface SymbolDisplayPartsDocumentationAndSymbolKind',
                new: 'export interface SymbolDisplayPartsDocumentationAndSymbolKind'
            },
        ]
    },
    {
        filePath: '../TypeScript/src/compiler/watchUtilities.ts',
        fixes: [
            {
                orig: 'interface FileAndDirectoryExistence',
                new: 'export interface FileAndDirectoryExistence'
            },
        ]
    },
    {
        filePath: '../TypeScript/src/compiler/parser.ts',
        fixes: [
            {
                orig: 'type PragmaDiagnosticReporter',
                new: 'export type PragmaDiagnosticReporter'
            },
        ]
    },
    {
        filePath: '../TypeScript/src/compiler/types.ts',
        fixes: [
            {
                orig: 'interface PragmaArgumentSpecification',
                new: 'export interface PragmaArgumentSpecification'
            },
            {
                orig: 'type ConcretePragmaSpecs',
                new: 'export type ConcretePragmaSpecs'
            },
            {
                orig: 'type PragmaArgumentType',
                new: 'export type PragmaArgumentType'
            },
            {
                orig: 'type PragmaArgTypeOptional',
                new: 'export type PragmaArgTypeOptional'
            },
            {
                orig: 'type PragmaArgTypeMaybeCapture',
                new: 'export type PragmaArgTypeMaybeCapture'
            },
        ]
    },
];
utils.runFixesforFiles(fixesForFiles);
