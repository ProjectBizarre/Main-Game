"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils = __importStar(require("./utils"));
var fixesForFiles = [
    {
        filePath: '../bin/typescript.d.ts',
        fixes: [
            {
                orig: /const enum /g,
                new: 'enum '
            },
            {
                orig: 'type PerfLogger = typeof import("@microsoft/typescript-etw");', new: '',
            },
            {
                orig: 'export const perfLogger: PerfLogger;', new: '',
            },
            {
                orig: '', new: 'export = ts',
            }
        ]
    },
];
utils.runFixesforFiles(fixesForFiles);
var packageJsonFilePath = '../package.json';
var pkg = require(packageJsonFilePath);
var tsVersion = require(packageJsonFilePath).devDependencies.typescript;
console.log('TypeScript nightly version:', tsVersion);
var now = new Date();
var ourVersion = tsVersion + '.' + now.getUTCHours() + '.' + now.getUTCMinutes();
pkg.version = ourVersion;
utils.writeFile(packageJsonFilePath, utils.stringify(pkg));
utils.writeFile('../kicktravis', ourVersion);
