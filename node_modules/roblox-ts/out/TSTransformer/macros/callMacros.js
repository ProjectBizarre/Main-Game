"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CALL_MACROS = void 0;
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const convertToIndexableExpression_1 = require("../util/convertToIndexableExpression");
const createTruthinessChecks_1 = require("../util/createTruthinessChecks");
const PRIMITIVE_LUAU_TYPES = new Set([
    "nil",
    "boolean",
    "string",
    "number",
    "table",
    "userdata",
    "function",
    "thread",
    "vector",
]);
exports.CALL_MACROS = {
    assert: (state, node, expression, args) => {
        args[0] = createTruthinessChecks_1.createTruthinessChecks(state, args[0], node.arguments[0], state.getType(node.arguments[0]));
        return LuauAST_1.default.call(LuauAST_1.default.globals.assert, args);
    },
    typeOf: (state, node, expression, args) => LuauAST_1.default.call(LuauAST_1.default.globals.typeof, args),
    typeIs: (state, node, expression, args) => {
        const [value, typeStr] = args;
        const typeFunc = LuauAST_1.default.isStringLiteral(typeStr) && PRIMITIVE_LUAU_TYPES.has(typeStr.value)
            ? LuauAST_1.default.globals.type
            : LuauAST_1.default.globals.typeof;
        return LuauAST_1.default.binary(LuauAST_1.default.call(typeFunc, [value]), "==", typeStr);
    },
    classIs: (state, node, expression, args) => {
        const [value, typeStr] = args;
        return LuauAST_1.default.binary(LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(value), "ClassName"), "==", typeStr);
    },
    opcall: (state, node, expression, args) => {
        const successId = LuauAST_1.default.tempId("success");
        const valueOrErrorId = LuauAST_1.default.tempId("valueOrError");
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
            left: LuauAST_1.default.list.make(successId, valueOrErrorId),
            right: LuauAST_1.default.call(LuauAST_1.default.globals.pcall, args),
        }));
        const successExp = LuauAST_1.default.map([
            [LuauAST_1.default.strings.success, LuauAST_1.default.bool(true)],
            [LuauAST_1.default.strings.value, valueOrErrorId],
        ]);
        const failureExp = LuauAST_1.default.map([
            [LuauAST_1.default.strings.success, LuauAST_1.default.bool(false)],
            [LuauAST_1.default.strings.error, valueOrErrorId],
        ]);
        return LuauAST_1.default.binary(LuauAST_1.default.binary(successId, "and", successExp), "or", failureExp);
    },
    identity: (state, node, expression, args) => args[0],
};
//# sourceMappingURL=callMacros.js.map