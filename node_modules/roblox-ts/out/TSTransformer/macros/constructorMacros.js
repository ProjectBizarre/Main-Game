"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONSTRUCTOR_MACROS = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const assert_1 = require("../../Shared/util/assert");
const transformExpression_1 = require("../nodes/expressions/transformExpression");
const ensureTransformOrder_1 = require("../util/ensureTransformOrder");
function wrapWeak(state, node, macro) {
    return LuauAST_1.default.call(LuauAST_1.default.globals.setmetatable, [
        macro(state, node),
        LuauAST_1.default.map([[LuauAST_1.default.strings.__mode, LuauAST_1.default.strings.k]]),
    ]);
}
function isFlatMap(expression) {
    if (LuauAST_1.default.isArray(expression)) {
        return LuauAST_1.default.list.every(expression.members, member => LuauAST_1.default.isArray(member));
    }
    return false;
}
const ArrayConstructor = (state, node) => {
    if (node.arguments && node.arguments.length > 0) {
        const args = ensureTransformOrder_1.ensureTransformOrder(state, node.arguments);
        return LuauAST_1.default.call(LuauAST_1.default.globals.table.create, args);
    }
    return LuauAST_1.default.array();
};
const SetConstructor = (state, node) => {
    if (!node.arguments || node.arguments.length === 0) {
        return LuauAST_1.default.set();
    }
    const arg = node.arguments[0];
    if (byots_1.default.isArrayLiteralExpression(arg) && !arg.elements.some(byots_1.default.isSpreadElement)) {
        return LuauAST_1.default.set(ensureTransformOrder_1.ensureTransformOrder(state, arg.elements));
    }
    else {
        const id = state.pushToVar(LuauAST_1.default.set(), "set");
        const valueId = LuauAST_1.default.tempId("v");
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
            ids: LuauAST_1.default.list.make(LuauAST_1.default.emptyId(), valueId),
            expression: LuauAST_1.default.call(LuauAST_1.default.globals.ipairs, [transformExpression_1.transformExpression(state, arg)]),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                    expression: id,
                    index: valueId,
                }),
                operator: "=",
                right: LuauAST_1.default.bool(true),
            })),
        }));
        return id;
    }
};
const MapConstructor = (state, node) => {
    if (!node.arguments || node.arguments.length === 0) {
        return LuauAST_1.default.map();
    }
    const arg = node.arguments[0];
    const transformed = transformExpression_1.transformExpression(state, arg);
    if (isFlatMap(transformed)) {
        const elements = LuauAST_1.default.list.toArray(transformed.members).map(e => {
            assert_1.assert(LuauAST_1.default.list.isNonEmpty(e.members));
            return [e.members.head.value, e.members.head.next.value];
        });
        return LuauAST_1.default.map(elements);
    }
    else {
        const id = state.pushToVar(LuauAST_1.default.map(), "map");
        const valueId = LuauAST_1.default.tempId("v");
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
            ids: LuauAST_1.default.list.make(LuauAST_1.default.emptyId(), valueId),
            expression: LuauAST_1.default.call(LuauAST_1.default.globals.ipairs, [transformed]),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                    expression: id,
                    index: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                        expression: valueId,
                        index: LuauAST_1.default.number(1),
                    }),
                }),
                operator: "=",
                right: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                    expression: valueId,
                    index: LuauAST_1.default.number(2),
                }),
            })),
        }));
        return id;
    }
};
exports.CONSTRUCTOR_MACROS = {
    ArrayConstructor,
    SetConstructor,
    MapConstructor,
    WeakSetConstructor: (state, node) => wrapWeak(state, node, SetConstructor),
    WeakMapConstructor: (state, node) => wrapWeak(state, node, MapConstructor),
    ReadonlyMapConstructor: MapConstructor,
    ReadonlySetConstructor: SetConstructor,
};
//# sourceMappingURL=constructorMacros.js.map