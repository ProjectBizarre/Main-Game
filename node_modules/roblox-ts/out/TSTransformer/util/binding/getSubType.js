"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSubType = void 0;
const byots_1 = __importDefault(require("byots"));
const assert_1 = require("../../../Shared/util/assert");
const types_1 = require("../types");
function getSubType(state, type, index) {
    if (!byots_1.default.isArray(type)) {
        if (typeof index === "string") {
            const prop = type.getProperty(index);
            assert_1.assert(prop && prop.valueDeclaration);
            return state.getType(prop.valueDeclaration);
        }
        else if (types_1.isLuaTupleType(state, type)) {
            assert_1.assert(type.aliasTypeArguments);
            return getSubType(state, type.aliasTypeArguments[0], index);
        }
        else if (types_1.isDefinitelyType(type, t => types_1.isArrayType(state, t))) {
            if (state.typeChecker.isTupleType(type)) {
                return getSubType(state, types_1.getTypeArguments(state, type), index);
            }
            else {
                const numIndexType = type.getNumberIndexType();
                assert_1.assert(numIndexType);
                return numIndexType;
            }
        }
        else if (types_1.isDefinitelyType(type, t => types_1.isStringType(t))) {
            return type;
        }
        else if (types_1.isDefinitelyType(type, t => types_1.isSetType(state, t))) {
            return types_1.getTypeArguments(state, type)[0];
        }
        else if (types_1.isDefinitelyType(type, t => types_1.isMapType(state, t))) {
            return types_1.getTypeArguments(state, type);
        }
        else if (types_1.isDefinitelyType(type, t => types_1.isGeneratorType(state, t))) {
            return types_1.getTypeArguments(state, type)[0];
        }
    }
    else if (typeof index === "number") {
        return type[index];
    }
    assert_1.assert(false);
}
exports.getSubType = getSubType;
//# sourceMappingURL=getSubType.js.map