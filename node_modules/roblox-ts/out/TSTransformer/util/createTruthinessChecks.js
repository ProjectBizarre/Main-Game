"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTruthinessChecks = exports.willCreateTruthinessChecks = void 0;
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const diagnostics_1 = require("../../Shared/diagnostics");
const DiagnosticService_1 = require("../classes/DiagnosticService");
const expressionChain_1 = require("./expressionChain");
const types_1 = require("./types");
function willCreateTruthinessChecks(type) {
    return (types_1.isPossiblyType(type, t => types_1.isNumberLiteralType(t, 0)) ||
        types_1.isPossiblyType(type, t => types_1.isNaNType(t)) ||
        types_1.isPossiblyType(type, t => types_1.isEmptyStringType(t)));
}
exports.willCreateTruthinessChecks = willCreateTruthinessChecks;
function createTruthinessChecks(state, exp, node, type) {
    const isAssignableToZero = types_1.isPossiblyType(type, t => types_1.isNumberLiteralType(t, 0));
    const isAssignableToNaN = types_1.isPossiblyType(type, t => types_1.isNaNType(t));
    const isAssignableToEmptyString = types_1.isPossiblyType(type, t => types_1.isEmptyStringType(t));
    if (isAssignableToZero || isAssignableToNaN || isAssignableToEmptyString) {
        exp = state.pushToVarIfComplex(exp, "value");
    }
    const checks = new Array();
    if (isAssignableToZero) {
        checks.push(LuauAST_1.default.binary(exp, "~=", LuauAST_1.default.number(0)));
    }
    if (isAssignableToZero || isAssignableToNaN) {
        checks.push(LuauAST_1.default.binary(exp, "==", exp));
    }
    if (isAssignableToEmptyString) {
        checks.push(LuauAST_1.default.binary(exp, "~=", LuauAST_1.default.string("")));
    }
    checks.push(exp);
    if (state.data.logTruthyChanges && (isAssignableToZero || isAssignableToNaN || isAssignableToEmptyString)) {
        const checkStrs = new Array();
        if (isAssignableToZero)
            checkStrs.push("0");
        if (isAssignableToZero || isAssignableToNaN)
            checkStrs.push("NaN");
        if (isAssignableToEmptyString)
            checkStrs.push('""');
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.warnings.truthyChange(checkStrs.join(", "))(node));
    }
    return expressionChain_1.binaryExpressionChain(checks, "and");
}
exports.createTruthinessChecks = createTruthinessChecks;
//# sourceMappingURL=createTruthinessChecks.js.map