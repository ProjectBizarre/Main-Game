"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapReturnIfLuaTuple = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const traversal_1 = require("./traversal");
const types_1 = require("./types");
function shouldWrapLuaTuple(node, exp) {
    if (!LuauAST_1.default.isCall(exp)) {
        return true;
    }
    const parent = traversal_1.skipUpwards(node).parent;
    if (byots_1.default.isExpressionStatement(parent) || byots_1.default.isForStatement(parent)) {
        return false;
    }
    if (byots_1.default.isVariableDeclaration(parent) && byots_1.default.isArrayBindingPattern(parent.name)) {
        return false;
    }
    if (byots_1.default.isAssignmentExpression(parent) && byots_1.default.isArrayLiteralExpression(parent.left)) {
        return false;
    }
    if (byots_1.default.isElementAccessExpression(parent)) {
        return false;
    }
    if (byots_1.default.isReturnStatement(parent)) {
        return false;
    }
    if (byots_1.default.isVoidExpression(parent)) {
        return false;
    }
    return true;
}
function wrapReturnIfLuaTuple(state, node, exp) {
    if (types_1.isLuaTupleType(state, state.getType(node)) && shouldWrapLuaTuple(node, exp)) {
        return LuauAST_1.default.array([exp]);
    }
    return exp;
}
exports.wrapReturnIfLuaTuple = wrapReturnIfLuaTuple;
//# sourceMappingURL=wrapReturnIfLuaTuple.js.map