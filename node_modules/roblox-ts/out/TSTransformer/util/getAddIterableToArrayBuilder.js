"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddIterableToArrayBuilder = void 0;
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const diagnostics_1 = require("../../Shared/diagnostics");
const assert_1 = require("../../Shared/util/assert");
const DiagnosticService_1 = require("../classes/DiagnosticService");
const convertToIndexableExpression_1 = require("./convertToIndexableExpression");
const types_1 = require("./types");
const valueToIdStr_1 = require("./valueToIdStr");
const addArray = (state, expression, arrayId, lengthId, amtElementsSinceUpdate, shouldUpdateLengthId) => {
    const result = LuauAST_1.default.list.make();
    const inputArray = state.pushToVarIfNonId(expression, "array");
    let inputLength = LuauAST_1.default.unary("#", inputArray);
    if (shouldUpdateLengthId) {
        inputLength = state.pushToVar(inputLength, valueToIdStr_1.valueToIdStr(inputArray) + "Length");
    }
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.CallStatement, {
        expression: LuauAST_1.default.call(LuauAST_1.default.globals.table.move, [
            inputArray,
            LuauAST_1.default.number(1),
            inputLength,
            LuauAST_1.default.binary(lengthId, "+", LuauAST_1.default.number(amtElementsSinceUpdate + 1)),
            arrayId,
        ]),
    }));
    if (shouldUpdateLengthId) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: inputLength,
        }));
    }
    return result;
};
const addString = (state, expression, arrayId, lengthId, amtElementsSinceUpdate) => {
    const result = LuauAST_1.default.list.make();
    if (amtElementsSinceUpdate > 0) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(amtElementsSinceUpdate),
        }));
    }
    const valueId = LuauAST_1.default.tempId("char");
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
        ids: LuauAST_1.default.list.make(valueId),
        expression: LuauAST_1.default.call(LuauAST_1.default.globals.string.gmatch, [expression, LuauAST_1.default.globals.utf8.charpattern]),
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(1),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: arrayId,
                index: lengthId,
            }),
            operator: "=",
            right: valueId,
        })),
    }));
    return result;
};
const addSet = (state, expression, arrayId, lengthId, amtElementsSinceUpdate) => {
    const result = LuauAST_1.default.list.make();
    if (amtElementsSinceUpdate > 0) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(amtElementsSinceUpdate),
        }));
    }
    const valueId = LuauAST_1.default.tempId("v");
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
        ids: LuauAST_1.default.list.make(valueId),
        expression: LuauAST_1.default.call(LuauAST_1.default.globals.pairs, [expression]),
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(1),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: arrayId,
                index: lengthId,
            }),
            operator: "=",
            right: valueId,
        })),
    }));
    return result;
};
const addMap = (state, expression, arrayId, lengthId, amtElementsSinceUpdate) => {
    const result = LuauAST_1.default.list.make();
    if (amtElementsSinceUpdate > 0) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(amtElementsSinceUpdate),
        }));
    }
    const keyId = LuauAST_1.default.tempId("k");
    const valueId = LuauAST_1.default.tempId("v");
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
        ids: LuauAST_1.default.list.make(keyId, valueId),
        expression: LuauAST_1.default.call(LuauAST_1.default.globals.pairs, [expression]),
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(1),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: arrayId,
                index: lengthId,
            }),
            operator: "=",
            right: LuauAST_1.default.array([keyId, valueId]),
        })),
    }));
    return result;
};
const addIterableFunction = (state, expression, arrayId, lengthId, amtElementsSinceUpdate) => {
    const result = LuauAST_1.default.list.make();
    if (amtElementsSinceUpdate > 0) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(amtElementsSinceUpdate),
        }));
    }
    const valueId = LuauAST_1.default.tempId("result");
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
        ids: LuauAST_1.default.list.make(valueId),
        expression,
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(1),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: arrayId,
                index: lengthId,
            }),
            operator: "=",
            right: valueId,
        })),
    }));
    return result;
};
const addIterableFunctionLuaTuple = (state, expression, arrayId, lengthId, amtElementsSinceUpdate) => {
    const result = LuauAST_1.default.list.make();
    if (amtElementsSinceUpdate > 0) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(amtElementsSinceUpdate),
        }));
    }
    const iterFuncId = state.pushToVar(expression, "iterFunc");
    const valueId = LuauAST_1.default.tempId("results");
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.WhileStatement, {
        condition: LuauAST_1.default.bool(true),
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
            left: valueId,
            right: LuauAST_1.default.array([LuauAST_1.default.call(iterFuncId)]),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
            condition: LuauAST_1.default.binary(LuauAST_1.default.unary("#", valueId), "==", LuauAST_1.default.number(0)),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.BreakStatement, {})),
            elseBody: LuauAST_1.default.list.make(),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(1),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: arrayId,
                index: lengthId,
            }),
            operator: "=",
            right: valueId,
        })),
    }));
    return result;
};
const addGenerator = (state, expression, arrayId, lengthId, amtElementsSinceUpdate) => {
    const result = LuauAST_1.default.list.make();
    if (amtElementsSinceUpdate > 0) {
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(amtElementsSinceUpdate),
        }));
    }
    const iterId = LuauAST_1.default.tempId("result");
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
        ids: LuauAST_1.default.list.make(iterId),
        expression: LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(expression), "next"),
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
            condition: LuauAST_1.default.property(iterId, "done"),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.BreakStatement, {})),
            elseBody: LuauAST_1.default.list.make(),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: lengthId,
            operator: "+=",
            right: LuauAST_1.default.number(1),
        }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: arrayId,
                index: lengthId,
            }),
            operator: "=",
            right: LuauAST_1.default.property(iterId, "value"),
        })),
    }));
    return result;
};
function getAddIterableToArrayBuilder(state, node, type) {
    if (types_1.isDefinitelyType(type, t => types_1.isArrayType(state, t))) {
        return addArray;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isStringType(t))) {
        return addString;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isSetType(state, t))) {
        return addSet;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isMapType(state, t))) {
        return addMap;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isIterableFunctionLuaTupleType(state, t))) {
        return addIterableFunctionLuaTuple;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isIterableFunctionType(state, t))) {
        return addIterableFunction;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isGeneratorType(state, t))) {
        return addGenerator;
    }
    else if (types_1.isDefinitelyType(type, t => types_1.isIterableType(state, t))) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noIterableIteration(node));
        return () => LuauAST_1.default.list.make();
    }
    else if (type.isUnion()) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noMacroUnion(node));
        return () => LuauAST_1.default.list.make();
    }
    else {
        assert_1.assert(false, `Iteration type not implemented: ${state.typeChecker.typeToString(type)}`);
    }
}
exports.getAddIterableToArrayBuilder = getAddIterableToArrayBuilder;
//# sourceMappingURL=getAddIterableToArrayBuilder.js.map