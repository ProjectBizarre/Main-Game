"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disableMixedTableInline = exports.disableArrayInline = exports.disableMapInline = exports.assignToMixedTablePointer = exports.assignToMapPointer = exports.createMixedTablePointer = exports.createArrayPointer = exports.createMapPointer = void 0;
const LuauAST_1 = __importDefault(require("../../LuauAST"));
function createMapPointer() {
    return { value: LuauAST_1.default.map() };
}
exports.createMapPointer = createMapPointer;
function createArrayPointer() {
    return { value: LuauAST_1.default.array() };
}
exports.createArrayPointer = createArrayPointer;
function createMixedTablePointer() {
    return { value: LuauAST_1.default.mixedTable() };
}
exports.createMixedTablePointer = createMixedTablePointer;
function assignToMapPointer(state, ptr, left, right) {
    if (LuauAST_1.default.isMap(ptr.value)) {
        LuauAST_1.default.list.push(ptr.value.fields, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.MapField, {
            index: left,
            value: right,
        }));
    }
    else {
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: ptr.value,
                index: left,
            }),
            operator: "=",
            right,
        }));
    }
}
exports.assignToMapPointer = assignToMapPointer;
function assignToMixedTablePointer(state, ptr, left, right) {
    if (LuauAST_1.default.isMixedTable(ptr.value)) {
        LuauAST_1.default.list.push(ptr.value.fields, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.MapField, {
            index: left,
            value: right,
        }));
    }
    else {
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: ptr.value,
                index: left,
            }),
            operator: "=",
            right,
        }));
    }
}
exports.assignToMixedTablePointer = assignToMixedTablePointer;
function disableMapInline(state, ptr) {
    if (LuauAST_1.default.isMap(ptr.value)) {
        ptr.value = state.pushToVar(ptr.value, "ptr");
    }
}
exports.disableMapInline = disableMapInline;
function disableArrayInline(state, ptr) {
    if (LuauAST_1.default.isArray(ptr.value)) {
        ptr.value = state.pushToVar(ptr.value, "ptr");
    }
}
exports.disableArrayInline = disableArrayInline;
function disableMixedTableInline(state, ptr) {
    if (LuauAST_1.default.isMixedTable(ptr.value)) {
        ptr.value = state.pushToVar(ptr.value, "ptr");
    }
}
exports.disableMixedTableInline = disableMixedTableInline;
//# sourceMappingURL=pointer.js.map