"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformParameters = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const diagnostics_1 = require("../../Shared/diagnostics");
const DiagnosticService_1 = require("../classes/DiagnosticService");
const transformArrayBindingPattern_1 = require("./binding/transformArrayBindingPattern");
const transformObjectBindingPattern_1 = require("./binding/transformObjectBindingPattern");
const transformIdentifier_1 = require("./expressions/transformIdentifier");
const transformInitializer_1 = require("./transformInitializer");
const isMethod_1 = require("../util/isMethod");
const validateIdentifier_1 = require("../util/validateIdentifier");
function optimizeArraySpreadParameter(state, parameters, bindingPattern) {
    for (const element of bindingPattern.elements) {
        if (byots_1.default.isOmittedExpression(element)) {
            LuauAST_1.default.list.push(parameters, LuauAST_1.default.emptyId());
        }
        else {
            if (element.dotDotDotToken) {
                DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSpreadDestructuring(element));
                return;
            }
            const name = element.name;
            if (byots_1.default.isIdentifier(name)) {
                const paramId = transformIdentifier_1.transformIdentifierDefined(state, name);
                validateIdentifier_1.validateIdentifier(state, name);
                LuauAST_1.default.list.push(parameters, paramId);
                if (element.initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, paramId, element.initializer));
                }
            }
            else {
                const paramId = LuauAST_1.default.tempId("param");
                LuauAST_1.default.list.push(parameters, paramId);
                if (element.initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, paramId, element.initializer));
                }
                if (byots_1.default.isArrayBindingPattern(name)) {
                    transformArrayBindingPattern_1.transformArrayBindingPattern(state, name, paramId);
                }
                else {
                    transformObjectBindingPattern_1.transformObjectBindingPattern(state, name, paramId);
                }
            }
        }
    }
}
function transformParameters(state, node) {
    const parameters = LuauAST_1.default.list.make();
    const statements = LuauAST_1.default.list.make();
    let hasDotDotDot = false;
    if (isMethod_1.isMethod(state, node)) {
        LuauAST_1.default.list.push(parameters, LuauAST_1.default.globals.self);
    }
    for (const parameter of node.parameters) {
        if (byots_1.default.isThisIdentifier(parameter.name)) {
            continue;
        }
        if (parameter.dotDotDotToken && byots_1.default.isArrayBindingPattern(parameter.name)) {
            const prereqs = state.capturePrereqs(() => optimizeArraySpreadParameter(state, parameters, parameter.name));
            LuauAST_1.default.list.pushList(statements, prereqs);
            continue;
        }
        let paramId;
        if (byots_1.default.isIdentifier(parameter.name)) {
            paramId = transformIdentifier_1.transformIdentifierDefined(state, parameter.name);
            validateIdentifier_1.validateIdentifier(state, parameter.name);
        }
        else {
            paramId = LuauAST_1.default.tempId("param");
        }
        if (parameter.dotDotDotToken) {
            hasDotDotDot = true;
            LuauAST_1.default.list.push(statements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
                left: paramId,
                right: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Array, {
                    members: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VarArgsLiteral, {})),
                }),
            }));
        }
        else {
            LuauAST_1.default.list.push(parameters, paramId);
        }
        if (parameter.initializer) {
            LuauAST_1.default.list.push(statements, transformInitializer_1.transformInitializer(state, paramId, parameter.initializer));
        }
        if (!byots_1.default.isIdentifier(parameter.name)) {
            const bindingPattern = parameter.name;
            if (byots_1.default.isArrayBindingPattern(bindingPattern)) {
                LuauAST_1.default.list.pushList(statements, state.capturePrereqs(() => transformArrayBindingPattern_1.transformArrayBindingPattern(state, bindingPattern, paramId)));
            }
            else {
                LuauAST_1.default.list.pushList(statements, state.capturePrereqs(() => transformObjectBindingPattern_1.transformObjectBindingPattern(state, bindingPattern, paramId)));
            }
        }
    }
    return {
        parameters,
        statements,
        hasDotDotDot,
    };
}
exports.transformParameters = transformParameters;
//# sourceMappingURL=transformParameters.js.map