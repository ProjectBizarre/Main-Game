"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformObjectBindingPattern = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformArrayBindingPattern_1 = require("./transformArrayBindingPattern");
const transformVariableStatement_1 = require("../statements/transformVariableStatement");
const transformInitializer_1 = require("../transformInitializer");
const objectAccessor_1 = require("../../util/binding/objectAccessor");
const validateNotAny_1 = require("../../util/validateNotAny");
function transformObjectBindingPattern(state, bindingPattern, parentId) {
    validateNotAny_1.validateNotAnyType(state, bindingPattern);
    const accessType = state.getType(bindingPattern);
    for (const element of bindingPattern.elements) {
        if (element.dotDotDotToken) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSpreadDestructuring(element));
            return;
        }
        const name = element.name;
        const prop = element.propertyName;
        if (byots_1.default.isIdentifier(name)) {
            const value = objectAccessor_1.objectAccessor(state, parentId, accessType, prop !== null && prop !== void 0 ? prop : name);
            const [id, prereqs] = transformVariableStatement_1.transformVariable(state, name, value);
            state.prereqList(prereqs);
            if (element.initializer) {
                state.prereq(transformInitializer_1.transformInitializer(state, id, element.initializer));
            }
        }
        else {
            const value = objectAccessor_1.objectAccessor(state, parentId, accessType, prop !== null && prop !== void 0 ? prop : name);
            const id = state.pushToVar(value, "binding");
            if (element.initializer) {
                state.prereq(transformInitializer_1.transformInitializer(state, id, element.initializer));
            }
            if (byots_1.default.isArrayBindingPattern(name)) {
                transformArrayBindingPattern_1.transformArrayBindingPattern(state, name, id);
            }
            else {
                transformObjectBindingPattern(state, name, id);
            }
        }
    }
}
exports.transformObjectBindingPattern = transformObjectBindingPattern;
//# sourceMappingURL=transformObjectBindingPattern.js.map