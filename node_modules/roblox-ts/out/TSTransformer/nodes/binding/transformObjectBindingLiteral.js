"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformObjectBindingLiteral = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformArrayBindingLiteral_1 = require("./transformArrayBindingLiteral");
const transformInitializer_1 = require("../transformInitializer");
const transformWritable_1 = require("../transformWritable");
const getSubType_1 = require("../../util/binding/getSubType");
const objectAccessor_1 = require("../../util/binding/objectAccessor");
const traversal_1 = require("../../util/traversal");
function transformObjectBindingLiteral(state, bindingLiteral, parentId, accessType) {
    for (const property of bindingLiteral.properties) {
        if (byots_1.default.isShorthandPropertyAssignment(property)) {
            const name = property.name;
            const value = objectAccessor_1.objectAccessor(state, parentId, accessType, name);
            const id = transformWritable_1.transformWritableExpression(state, name, property.objectAssignmentInitializer !== undefined);
            state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                left: id,
                operator: "=",
                right: value,
            }));
            assert_1.assert(LuauAST_1.default.isAnyIdentifier(id));
            if (property.objectAssignmentInitializer) {
                state.prereq(transformInitializer_1.transformInitializer(state, id, property.objectAssignmentInitializer));
            }
        }
        else if (byots_1.default.isSpreadAssignment(property)) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSpreadDestructuring(property));
            return;
        }
        else if (byots_1.default.isPropertyAssignment(property)) {
            const name = property.name;
            let init = property.initializer;
            let initializer;
            if (byots_1.default.isBinaryExpression(property.initializer)) {
                initializer = traversal_1.skipDownwards(property.initializer.right);
                init = traversal_1.skipDownwards(property.initializer.left);
            }
            const value = objectAccessor_1.objectAccessor(state, parentId, accessType, name);
            if (byots_1.default.isIdentifier(init) || byots_1.default.isElementAccessExpression(init) || byots_1.default.isPropertyAccessExpression(init)) {
                const id = transformWritable_1.transformWritableExpression(state, init, initializer !== undefined);
                state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                    left: id,
                    operator: "=",
                    right: value,
                }));
                if (initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, id, initializer));
                }
            }
            else if (byots_1.default.isArrayLiteralExpression(init)) {
                const id = state.pushToVar(value, "binding");
                if (initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, id, initializer));
                }
                assert_1.assert(byots_1.default.isIdentifier(name));
                transformArrayBindingLiteral_1.transformArrayBindingLiteral(state, init, id, getSubType_1.getSubType(state, accessType, name.text));
            }
            else if (byots_1.default.isObjectLiteralExpression(init)) {
                const id = state.pushToVar(value, "binding");
                if (initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, id, initializer));
                }
                assert_1.assert(byots_1.default.isIdentifier(name));
                transformObjectBindingLiteral(state, init, id, getSubType_1.getSubType(state, accessType, name.text));
            }
            else {
                assert_1.assert(false);
            }
        }
        else {
            assert_1.assert(false);
        }
    }
}
exports.transformObjectBindingLiteral = transformObjectBindingLiteral;
//# sourceMappingURL=transformObjectBindingLiteral.js.map