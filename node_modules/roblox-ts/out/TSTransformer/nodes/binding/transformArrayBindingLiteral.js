"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformArrayBindingLiteral = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformObjectBindingLiteral_1 = require("./transformObjectBindingLiteral");
const transformInitializer_1 = require("../transformInitializer");
const transformWritable_1 = require("../transformWritable");
const getAccessorForBindingType_1 = require("../../util/binding/getAccessorForBindingType");
const getSubType_1 = require("../../util/binding/getSubType");
const traversal_1 = require("../../util/traversal");
function transformArrayBindingLiteral(state, bindingLiteral, parentId, accessType) {
    let index = 0;
    const idStack = new Array();
    const accessor = getAccessorForBindingType_1.getAccessorForBindingType(state, bindingLiteral, accessType);
    for (let element of bindingLiteral.elements) {
        if (byots_1.default.isOmittedExpression(element)) {
            accessor(state, parentId, index, idStack, true);
        }
        else if (byots_1.default.isSpreadElement(element)) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSpreadDestructuring(element));
        }
        else {
            let initializer;
            if (byots_1.default.isBinaryExpression(element)) {
                initializer = traversal_1.skipDownwards(element.right);
                element = traversal_1.skipDownwards(element.left);
            }
            const value = accessor(state, parentId, index, idStack, false);
            if (byots_1.default.isIdentifier(element) ||
                byots_1.default.isElementAccessExpression(element) ||
                byots_1.default.isPropertyAccessExpression(element)) {
                const id = transformWritable_1.transformWritableExpression(state, element, initializer !== undefined);
                state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                    left: id,
                    operator: "=",
                    right: value,
                }));
                if (initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, id, initializer));
                }
            }
            else if (byots_1.default.isArrayLiteralExpression(element)) {
                const id = state.pushToVar(value, "binding");
                if (initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, id, initializer));
                }
                transformArrayBindingLiteral(state, element, id, getSubType_1.getSubType(state, accessType, index));
            }
            else if (byots_1.default.isObjectLiteralExpression(element)) {
                const id = state.pushToVar(value, "binding");
                if (initializer) {
                    state.prereq(transformInitializer_1.transformInitializer(state, id, initializer));
                }
                transformObjectBindingLiteral_1.transformObjectBindingLiteral(state, element, id, getSubType_1.getSubType(state, accessType, index));
            }
            else {
                assert_1.assert(false);
            }
        }
        index++;
    }
}
exports.transformArrayBindingLiteral = transformArrayBindingLiteral;
//# sourceMappingURL=transformArrayBindingLiteral.js.map