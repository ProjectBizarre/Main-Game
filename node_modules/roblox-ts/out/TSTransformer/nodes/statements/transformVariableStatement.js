"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformVariableStatement = exports.transformVariableDeclarationList = exports.isVarDeclaration = exports.transformVariableDeclaration = exports.transformVariable = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const getOrSetDefault_1 = require("../../../Shared/util/getOrSetDefault");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformArrayBindingPattern_1 = require("../binding/transformArrayBindingPattern");
const transformObjectBindingPattern_1 = require("../binding/transformObjectBindingPattern");
const transformExpression_1 = require("../expressions/transformExpression");
const transformIdentifier_1 = require("../expressions/transformIdentifier");
const transformInitializer_1 = require("../transformInitializer");
const isDefinedAsLet_1 = require("../../util/isDefinedAsLet");
const traversal_1 = require("../../util/traversal");
const types_1 = require("../../util/types");
const validateIdentifier_1 = require("../../util/validateIdentifier");
function checkVariableHoist(state, node, symbol) {
    if (state.isHoisted.get(symbol) !== undefined) {
        return;
    }
    const statement = traversal_1.getAncestor(node, byots_1.default.isStatement);
    if (!statement) {
        return;
    }
    const caseClause = statement.parent;
    if (!byots_1.default.isCaseClause(caseClause)) {
        return;
    }
    const caseBlock = caseClause.parent;
    const isUsedOutsideOfCaseClause = byots_1.default.FindAllReferences.Core.eachSymbolReferenceInFile(node, state.typeChecker, node.getSourceFile(), token => {
        if (!traversal_1.isAncestorOf(caseClause, token)) {
            return true;
        }
    }, caseBlock) === true;
    if (isUsedOutsideOfCaseClause) {
        getOrSetDefault_1.getOrSetDefault(state.hoistsByStatement, statement.parent, () => new Array()).push(node);
        state.isHoisted.set(symbol, true);
    }
}
function transformVariable(state, identifier, right) {
    return state.capture(() => {
        validateIdentifier_1.validateIdentifier(state, identifier);
        const symbol = state.typeChecker.getSymbolAtLocation(identifier);
        assert_1.assert(symbol);
        if (isDefinedAsLet_1.isDefinedAsLet(state, symbol)) {
            const exportAccess = state.getModuleIdPropertyAccess(symbol);
            if (exportAccess) {
                if (right) {
                    state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                        left: exportAccess,
                        operator: "=",
                        right,
                    }));
                }
                return exportAccess;
            }
        }
        const left = transformIdentifier_1.transformIdentifierDefined(state, identifier);
        checkVariableHoist(state, identifier, symbol);
        if (state.isHoisted.get(symbol) === true) {
            if (right) {
                state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, { left, operator: "=", right }));
            }
        }
        else {
            state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, { left, right }));
        }
        return left;
    });
}
exports.transformVariable = transformVariable;
function transformLuaTupleDestructure(state, bindingPattern, value) {
    return state.capturePrereqs(() => {
        const ids = LuauAST_1.default.list.make();
        const statements = state.capturePrereqs(() => {
            for (const element of bindingPattern.elements) {
                if (byots_1.default.isOmittedExpression(element)) {
                    LuauAST_1.default.list.push(ids, LuauAST_1.default.emptyId());
                }
                else {
                    if (element.dotDotDotToken) {
                        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSpreadDestructuring(element));
                        return;
                    }
                    if (byots_1.default.isIdentifier(element.name)) {
                        validateIdentifier_1.validateIdentifier(state, element.name);
                        const id = transformIdentifier_1.transformIdentifierDefined(state, element.name);
                        LuauAST_1.default.list.push(ids, id);
                        if (element.initializer) {
                            state.prereq(transformInitializer_1.transformInitializer(state, id, element.initializer));
                        }
                    }
                    else {
                        const id = LuauAST_1.default.tempId("binding");
                        LuauAST_1.default.list.push(ids, id);
                        if (element.initializer) {
                            state.prereq(transformInitializer_1.transformInitializer(state, id, element.initializer));
                        }
                        if (byots_1.default.isArrayBindingPattern(element.name)) {
                            transformArrayBindingPattern_1.transformArrayBindingPattern(state, element.name, id);
                        }
                        else {
                            transformObjectBindingPattern_1.transformObjectBindingPattern(state, element.name, id);
                        }
                    }
                }
            }
        });
        if (LuauAST_1.default.list.isEmpty(ids)) {
            LuauAST_1.default.list.push(ids, LuauAST_1.default.emptyId());
        }
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, { left: ids, right: value }));
        state.prereqList(statements);
    });
}
function transformVariableDeclaration(state, node) {
    const value = node.initializer ? transformExpression_1.transformExpression(state, node.initializer) : undefined;
    if (byots_1.default.isIdentifier(node.name)) {
        return transformVariable(state, node.name, value)[1];
    }
    else {
        assert_1.assert(node.initializer && value);
        const name = node.name;
        if (byots_1.default.isArrayBindingPattern(name)) {
            if (LuauAST_1.default.isCall(value) && types_1.isLuaTupleType(state, state.getType(node.initializer))) {
                return transformLuaTupleDestructure(state, name, value);
            }
            const id = state.pushToVar(value, "binding");
            return state.capturePrereqs(() => transformArrayBindingPattern_1.transformArrayBindingPattern(state, name, id));
        }
        else {
            const id = state.pushToVar(value, "binding");
            return state.capturePrereqs(() => transformObjectBindingPattern_1.transformObjectBindingPattern(state, name, id));
        }
    }
}
exports.transformVariableDeclaration = transformVariableDeclaration;
function isVarDeclaration(node) {
    return !(node.flags & byots_1.default.NodeFlags.Const) && !(node.flags & byots_1.default.NodeFlags.Let);
}
exports.isVarDeclaration = isVarDeclaration;
function transformVariableDeclarationList(state, node) {
    if (isVarDeclaration(node)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noVar(node));
    }
    const statements = LuauAST_1.default.list.make();
    for (const declaration of node.declarations) {
        LuauAST_1.default.list.pushList(statements, transformVariableDeclaration(state, declaration));
    }
    return statements;
}
exports.transformVariableDeclarationList = transformVariableDeclarationList;
function transformVariableStatement(state, node) {
    return transformVariableDeclarationList(state, node.declarationList);
}
exports.transformVariableStatement = transformVariableStatement;
//# sourceMappingURL=transformVariableStatement.js.map