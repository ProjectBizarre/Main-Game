"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformExportAssignment = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformExpression_1 = require("../expressions/transformExpression");
const isDefinedAsLet_1 = require("../../util/isDefinedAsLet");
const isSymbolOfValue_1 = require("../../util/isSymbolOfValue");
function transformExportEquals(state, node) {
    state.hasExportEquals = true;
    const sourceFile = node.getSourceFile();
    const finalStatement = sourceFile.statements[sourceFile.statements.length - 1];
    if (finalStatement === node) {
        return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, { expression: transformExpression_1.transformExpression(state, node.expression) }));
    }
    else {
        return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
            left: state.getModuleIdFromNode(node),
            right: transformExpression_1.transformExpression(state, node.expression),
        }));
    }
}
function transformExportDefault(state, node) {
    const statements = LuauAST_1.default.list.make();
    const [expression, prereqs] = state.capture(() => transformExpression_1.transformExpression(state, node.expression));
    LuauAST_1.default.list.pushList(statements, prereqs);
    LuauAST_1.default.list.push(statements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
        left: LuauAST_1.default.id("default"),
        right: expression,
    }));
    return statements;
}
function transformExportAssignment(state, node) {
    const symbol = state.typeChecker.getSymbolAtLocation(node.expression);
    if (symbol && isDefinedAsLet_1.isDefinedAsLet(state, symbol)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noExportAssignmentLet(node));
    }
    if (symbol && !isSymbolOfValue_1.isSymbolOfValue(byots_1.default.skipAlias(symbol, state.typeChecker))) {
        return LuauAST_1.default.list.make();
    }
    if (node.isExportEquals) {
        return transformExportEquals(state, node);
    }
    else {
        return transformExportDefault(state, node);
    }
}
exports.transformExportAssignment = transformExportAssignment;
//# sourceMappingURL=transformExportAssignment.js.map