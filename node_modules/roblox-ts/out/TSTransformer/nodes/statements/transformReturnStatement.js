"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformReturnStatement = exports.transformReturnStatementInner = void 0;
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const transformExpression_1 = require("../expressions/transformExpression");
const isBlockedByTryStatement_1 = require("../../util/isBlockedByTryStatement");
const traversal_1 = require("../../util/traversal");
const types_1 = require("../../util/types");
function isTupleReturningCall(state, tsExpression, luaExpression) {
    return (LuauAST_1.default.isCall(luaExpression) &&
        types_1.isLuaTupleType(state, state.typeChecker.getTypeAtLocation(traversal_1.skipDownwards(tsExpression))));
}
function transformReturnStatementInner(state, returnExp) {
    let expression = transformExpression_1.transformExpression(state, traversal_1.skipDownwards(returnExp));
    if (types_1.isLuaTupleType(state, state.getType(returnExp)) && !isTupleReturningCall(state, returnExp, expression)) {
        if (LuauAST_1.default.isArray(expression)) {
            expression = expression.members;
        }
        else {
            expression = LuauAST_1.default.call(LuauAST_1.default.globals.unpack, [expression]);
        }
    }
    if (isBlockedByTryStatement_1.isReturnBlockedByTryStatement(returnExp)) {
        state.markTryUses("usesReturn");
        return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, {
            expression: LuauAST_1.default.list.make(state.TS(returnExp, "TRY_RETURN"), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Array, {
                members: LuauAST_1.default.list.isList(expression) ? expression : LuauAST_1.default.list.make(expression),
            })),
        });
    }
    return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, { expression });
}
exports.transformReturnStatementInner = transformReturnStatementInner;
function transformReturnStatement(state, node) {
    if (!node.expression) {
        if (isBlockedByTryStatement_1.isReturnBlockedByTryStatement(node)) {
            state.markTryUses("usesReturn");
            return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, {
                expression: LuauAST_1.default.list.make(state.TS(node, "TRY_RETURN"), LuauAST_1.default.array()),
            }));
        }
        return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, { expression: LuauAST_1.default.nil() }));
    }
    return LuauAST_1.default.list.make(transformReturnStatementInner(state, node.expression));
}
exports.transformReturnStatement = transformReturnStatement;
//# sourceMappingURL=transformReturnStatement.js.map