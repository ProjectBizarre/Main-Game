"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformWhileStatement = void 0;
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const transformExpression_1 = require("../expressions/transformExpression");
const transformStatementList_1 = require("../transformStatementList");
const createTruthinessChecks_1 = require("../../util/createTruthinessChecks");
const getStatements_1 = require("../../util/getStatements");
function transformWhileStatement(state, node) {
    const whileStatements = LuauAST_1.default.list.make();
    let [conditionExp, conditionPrereqs] = state.capture(() => createTruthinessChecks_1.createTruthinessChecks(state, transformExpression_1.transformExpression(state, node.expression), node.expression, state.getType(node.expression)));
    if (!LuauAST_1.default.list.isEmpty(conditionPrereqs)) {
        LuauAST_1.default.list.pushList(whileStatements, conditionPrereqs);
        LuauAST_1.default.list.push(whileStatements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
            condition: LuauAST_1.default.unary("not", conditionExp),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.BreakStatement, {})),
            elseBody: LuauAST_1.default.list.make(),
        }));
        conditionExp = LuauAST_1.default.bool(true);
    }
    LuauAST_1.default.list.pushList(whileStatements, transformStatementList_1.transformStatementList(state, getStatements_1.getStatements(node.statement)));
    return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.WhileStatement, {
        condition: conditionExp,
        statements: whileStatements,
    }));
}
exports.transformWhileStatement = transformWhileStatement;
//# sourceMappingURL=transformWhileStatement.js.map