"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformForStatement = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformExpression_1 = require("../expressions/transformExpression");
const transformIdentifier_1 = require("../expressions/transformIdentifier");
const transformExpressionStatement_1 = require("./transformExpressionStatement");
const transformVariableStatement_1 = require("./transformVariableStatement");
const transformStatementList_1 = require("../transformStatementList");
const createTruthinessChecks_1 = require("../../util/createTruthinessChecks");
const getDeclaredVariables_1 = require("../../util/getDeclaredVariables");
const getStatements_1 = require("../../util/getStatements");
const traversal_1 = require("../../util/traversal");
function addFinalizersToIfStatement(node, finalizers) {
    if (LuauAST_1.default.list.isNonEmpty(node.statements)) {
        addFinalizers(node.statements, node.statements.head, finalizers);
    }
    if (LuauAST_1.default.list.isList(node.elseBody)) {
        if (LuauAST_1.default.list.isNonEmpty(node.elseBody)) {
            addFinalizers(node.elseBody, node.elseBody.head, finalizers);
        }
    }
    else {
        addFinalizersToIfStatement(node.elseBody, finalizers);
    }
}
function addFinalizers(list, node, finalizers) {
    assert_1.assert(!LuauAST_1.default.list.isEmpty(list));
    const statement = node.value;
    if (LuauAST_1.default.isContinueStatement(statement)) {
        const finalizersClone = LuauAST_1.default.list.clone(finalizers);
        LuauAST_1.default.list.forEach(finalizersClone, node => (node.parent = statement.parent));
        if (node.prev) {
            node.prev.next = finalizersClone.head;
        }
        else if (node === list.head) {
            list.head = finalizersClone.head;
        }
        node.prev = finalizersClone.tail;
        finalizersClone.tail.next = node;
    }
    if (LuauAST_1.default.isDoStatement(statement)) {
        if (LuauAST_1.default.list.isNonEmpty(statement.statements)) {
            addFinalizers(statement.statements, statement.statements.head, finalizers);
        }
    }
    else if (LuauAST_1.default.isIfStatement(statement)) {
        addFinalizersToIfStatement(statement, finalizers);
    }
    if (node.next) {
        addFinalizers(list, node.next, finalizers);
    }
}
function canSkipClone(state, initializer, id) {
    return !byots_1.default.FindAllReferences.Core.isSymbolReferencedInFile(id, state.typeChecker, id.getSourceFile(), initializer);
}
function isIdWriteOrAsyncRead(state, forStatement, id) {
    return byots_1.default.FindAllReferences.Core.eachSymbolReferenceInFile(id, state.typeChecker, id.getSourceFile(), token => {
        if (byots_1.default.isWriteAccess(token) &&
            (!forStatement.incrementor || !traversal_1.isAncestorOf(forStatement.incrementor, token))) {
            return true;
        }
        const ancestor = traversal_1.getAncestor(token, v => v === forStatement || byots_1.default.isFunctionLike(v));
        if (ancestor && ancestor !== forStatement) {
            return true;
        }
    }, forStatement);
}
function transformForStatement(state, node) {
    const { initializer, condition, incrementor, statement } = node;
    const result = LuauAST_1.default.list.make();
    const whileStatements = LuauAST_1.default.list.make();
    const finalizerStatements = LuauAST_1.default.list.make();
    const variables = initializer && byots_1.default.isVariableDeclarationList(initializer) ? getDeclaredVariables_1.getDeclaredVariables(initializer) : [];
    const hasWriteOrAsyncRead = new Set();
    const skipClone = new Set();
    if (initializer && byots_1.default.isVariableDeclarationList(initializer)) {
        for (const id of variables) {
            const symbol = state.typeChecker.getSymbolAtLocation(id);
            assert_1.assert(symbol);
            if (isIdWriteOrAsyncRead(state, node, id)) {
                hasWriteOrAsyncRead.add(symbol);
            }
            if (canSkipClone(state, initializer, id)) {
                skipClone.add(symbol);
            }
        }
    }
    if (initializer) {
        if (byots_1.default.isVariableDeclarationList(initializer)) {
            if (transformVariableStatement_1.isVarDeclaration(initializer)) {
                DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noVar(node));
            }
            for (const id of variables) {
                const symbol = state.typeChecker.getSymbolAtLocation(id);
                assert_1.assert(symbol);
                if (hasWriteOrAsyncRead.has(symbol)) {
                    if (skipClone.has(symbol)) {
                        state.symbolToIdMap.set(symbol, LuauAST_1.default.tempId(id.getText()));
                    }
                    else {
                        const copyId = LuauAST_1.default.tempId(`${id.getText()}Copy`);
                        state.symbolToIdMap.set(symbol, copyId);
                    }
                }
            }
            for (const declaration of initializer.declarations) {
                const [decStatements, decPrereqs] = state.capture(() => {
                    const result = LuauAST_1.default.list.make();
                    const [decStatements, decPrereqs] = state.capture(() => transformVariableStatement_1.transformVariableDeclaration(state, declaration));
                    LuauAST_1.default.list.pushList(result, decPrereqs);
                    LuauAST_1.default.list.pushList(result, decStatements);
                    return result;
                });
                LuauAST_1.default.list.pushList(result, decPrereqs);
                LuauAST_1.default.list.pushList(result, decStatements);
            }
            for (const id of variables) {
                const symbol = state.typeChecker.getSymbolAtLocation(id);
                assert_1.assert(symbol);
                if (hasWriteOrAsyncRead.has(symbol)) {
                    let tempId;
                    if (skipClone.has(symbol)) {
                        tempId = state.symbolToIdMap.get(symbol);
                        assert_1.assert(tempId);
                    }
                    else {
                        tempId = LuauAST_1.default.tempId(id.getText());
                        const copyId = state.symbolToIdMap.get(symbol);
                        assert_1.assert(copyId);
                        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
                            left: tempId,
                            right: copyId,
                        }));
                    }
                    state.symbolToIdMap.delete(symbol);
                    const realId = transformIdentifier_1.transformIdentifierDefined(state, id);
                    LuauAST_1.default.list.push(whileStatements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
                        left: realId,
                        right: tempId,
                    }));
                    LuauAST_1.default.list.push(finalizerStatements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                        left: tempId,
                        operator: "=",
                        right: realId,
                    }));
                }
            }
        }
        else {
            const [statements, prereqs] = state.capture(() => transformExpressionStatement_1.transformExpressionStatementInner(state, initializer));
            LuauAST_1.default.list.pushList(result, prereqs);
            LuauAST_1.default.list.pushList(result, statements);
        }
    }
    if (incrementor) {
        const shouldIncrement = LuauAST_1.default.tempId("shouldIncrement");
        LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
            left: shouldIncrement,
            right: LuauAST_1.default.bool(false),
        }));
        const incrementorStatements = LuauAST_1.default.list.make();
        const [statements, prereqs] = state.capture(() => transformExpressionStatement_1.transformExpressionStatementInner(state, incrementor));
        LuauAST_1.default.list.pushList(incrementorStatements, prereqs);
        LuauAST_1.default.list.pushList(incrementorStatements, statements);
        LuauAST_1.default.list.push(whileStatements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
            condition: shouldIncrement,
            statements: incrementorStatements,
            elseBody: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                left: shouldIncrement,
                operator: "=",
                right: LuauAST_1.default.bool(true),
            })),
        }));
    }
    let [conditionExp, conditionPrereqs] = state.capture(() => {
        if (condition) {
            return createTruthinessChecks_1.createTruthinessChecks(state, transformExpression_1.transformExpression(state, condition), condition, state.getType(condition));
        }
        else {
            return LuauAST_1.default.bool(true);
        }
    });
    LuauAST_1.default.list.pushList(whileStatements, conditionPrereqs);
    if (!LuauAST_1.default.list.isEmpty(whileStatements)) {
        if (condition) {
            LuauAST_1.default.list.push(whileStatements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
                condition: LuauAST_1.default.unary("not", conditionExp),
                statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.BreakStatement, {})),
                elseBody: LuauAST_1.default.list.make(),
            }));
        }
        conditionExp = LuauAST_1.default.bool(true);
    }
    LuauAST_1.default.list.pushList(whileStatements, transformStatementList_1.transformStatementList(state, getStatements_1.getStatements(statement)));
    if (LuauAST_1.default.list.isNonEmpty(whileStatements) && LuauAST_1.default.list.isNonEmpty(finalizerStatements)) {
        addFinalizers(whileStatements, whileStatements.head, finalizerStatements);
    }
    if (!whileStatements.tail || !LuauAST_1.default.isFinalStatement(whileStatements.tail.value)) {
        LuauAST_1.default.list.pushList(whileStatements, finalizerStatements);
    }
    LuauAST_1.default.list.push(result, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.WhileStatement, {
        condition: conditionExp,
        statements: whileStatements,
    }));
    return result.head === result.tail
        ? result
        : LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.DoStatement, { statements: result }));
}
exports.transformForStatement = transformForStatement;
//# sourceMappingURL=transformForStatement.js.map