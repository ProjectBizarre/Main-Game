"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformTryStatement = void 0;
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const assert_1 = require("../../../Shared/util/assert");
const transformBindingName_1 = require("../binding/transformBindingName");
const transformStatementList_1 = require("../transformStatementList");
const isBlockedByTryStatement_1 = require("../../util/isBlockedByTryStatement");
function transformCatchClause(state, node) {
    const parameters = LuauAST_1.default.list.make();
    const statements = LuauAST_1.default.list.make();
    if (node.variableDeclaration) {
        LuauAST_1.default.list.push(parameters, transformBindingName_1.transformBindingName(state, node.variableDeclaration.name, statements));
    }
    LuauAST_1.default.list.pushList(statements, transformStatementList_1.transformStatementList(state, node.block.statements));
    const catchFunction = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.FunctionExpression, {
        parameters,
        hasDotDotDot: false,
        statements,
    });
    return catchFunction;
}
function transformIntoTryCall(state, node, exitTypeId, returnsId, tryUses) {
    const tryCallArgs = new Array();
    tryCallArgs.push(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.FunctionExpression, {
        parameters: LuauAST_1.default.list.make(),
        hasDotDotDot: false,
        statements: transformStatementList_1.transformStatementList(state, node.tryBlock.statements),
    }));
    if (node.catchClause) {
        tryCallArgs.push(transformCatchClause(state, node.catchClause));
    }
    else {
        assert_1.assert(node.finallyBlock);
        tryCallArgs.push(LuauAST_1.default.nil());
    }
    if (node.finallyBlock) {
        tryCallArgs.push(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.FunctionExpression, {
            parameters: LuauAST_1.default.list.make(),
            hasDotDotDot: false,
            statements: transformStatementList_1.transformStatementList(state, node.finallyBlock.statements),
        }));
    }
    if (!tryUses.usesReturn && !tryUses.usesBreak && !tryUses.usesContinue) {
        return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.CallStatement, {
            expression: LuauAST_1.default.call(state.TS(node, "try"), tryCallArgs),
        });
    }
    return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
        left: LuauAST_1.default.list.make(exitTypeId, returnsId),
        right: LuauAST_1.default.call(state.TS(node, "try"), tryCallArgs),
    });
}
function createFlowControlCondition(state, node, exitTypeId, flowControlConstant) {
    return LuauAST_1.default.binary(exitTypeId, "==", state.TS(node, flowControlConstant));
}
function collapseFlowControlCases(exitTypeId, cases) {
    assert_1.assert(cases.length > 0);
    let nextStatements = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
        condition: exitTypeId,
        statements: cases[cases.length - 1].statements,
        elseBody: LuauAST_1.default.list.make(),
    });
    for (let i = cases.length - 2; i >= 0; i--) {
        nextStatements = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
            condition: cases[i].condition || exitTypeId,
            statements: cases[i].statements,
            elseBody: nextStatements,
        });
    }
    return LuauAST_1.default.list.make(nextStatements);
}
function transformFlowControl(state, node, exitTypeId, returnsId, tryUses) {
    const flowControlCases = new Array();
    if (!tryUses.usesReturn && !tryUses.usesBreak && !tryUses.usesContinue) {
        return LuauAST_1.default.list.make();
    }
    const returnBlocked = isBlockedByTryStatement_1.isReturnBlockedByTryStatement(node.parent);
    const breakBlocked = isBlockedByTryStatement_1.isBreakBlockedByTryStatement(node.parent);
    if (tryUses.usesReturn && returnBlocked) {
        state.markTryUses("usesReturn");
    }
    if (tryUses.usesBreak && breakBlocked) {
        state.markTryUses("usesBreak");
    }
    if (tryUses.usesContinue && breakBlocked) {
        state.markTryUses("usesContinue");
    }
    if (tryUses.usesReturn) {
        if (returnBlocked) {
            flowControlCases.push({
                condition: createFlowControlCondition(state, node, exitTypeId, "TRY_RETURN"),
                statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, {
                    expression: LuauAST_1.default.list.make(exitTypeId, returnsId),
                })),
            });
            if (breakBlocked) {
                return collapseFlowControlCases(exitTypeId, flowControlCases);
            }
        }
        else {
            flowControlCases.push({
                condition: createFlowControlCondition(state, node, exitTypeId, "TRY_RETURN"),
                statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, {
                    expression: LuauAST_1.default.call(LuauAST_1.default.globals.unpack, [returnsId]),
                })),
            });
        }
    }
    if (tryUses.usesBreak || tryUses.usesContinue) {
        if (breakBlocked) {
            flowControlCases.push({
                statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ReturnStatement, {
                    expression: exitTypeId,
                })),
            });
        }
        else {
            if (tryUses.usesBreak) {
                flowControlCases.push({
                    condition: createFlowControlCondition(state, node, exitTypeId, "TRY_BREAK"),
                    statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.BreakStatement, {})),
                });
            }
            if (tryUses.usesContinue) {
                flowControlCases.push({
                    condition: createFlowControlCondition(state, node, exitTypeId, "TRY_CONTINUE"),
                    statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ContinueStatement, {})),
                });
            }
        }
    }
    return collapseFlowControlCases(exitTypeId, flowControlCases);
}
function transformTryStatement(state, node) {
    const statements = LuauAST_1.default.list.make();
    const exitTypeId = LuauAST_1.default.tempId("exitType");
    const returnsId = LuauAST_1.default.tempId("returns");
    const tryUses = state.pushTryUsesStack();
    LuauAST_1.default.list.push(statements, transformIntoTryCall(state, node, exitTypeId, returnsId, tryUses));
    state.popTryUsesStack();
    LuauAST_1.default.list.pushList(statements, transformFlowControl(state, node, exitTypeId, returnsId, tryUses));
    return statements;
}
exports.transformTryStatement = transformTryStatement;
//# sourceMappingURL=transformTryStatement.js.map