"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformIfStatement = exports.transformIfStatementInner = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const transformExpression_1 = require("../expressions/transformExpression");
const transformStatementList_1 = require("../transformStatementList");
const createTruthinessChecks_1 = require("../../util/createTruthinessChecks");
const getStatements_1 = require("../../util/getStatements");
function transformIfStatementInner(state, node) {
    const condition = createTruthinessChecks_1.createTruthinessChecks(state, transformExpression_1.transformExpression(state, node.expression), node.expression, state.getType(node.expression));
    const statements = transformStatementList_1.transformStatementList(state, getStatements_1.getStatements(node.thenStatement));
    const elseStatement = node.elseStatement;
    let elseBody;
    if (elseStatement === undefined) {
        elseBody = LuauAST_1.default.list.make();
    }
    else if (byots_1.default.isIfStatement(elseStatement)) {
        const [elseIf, elseIfPrereqs] = state.capture(() => transformIfStatementInner(state, elseStatement));
        if (LuauAST_1.default.list.isEmpty(elseIfPrereqs)) {
            elseBody = elseIf;
        }
        else {
            const elseIfStatements = LuauAST_1.default.list.make();
            LuauAST_1.default.list.pushList(elseIfStatements, elseIfPrereqs);
            LuauAST_1.default.list.push(elseIfStatements, elseIf);
            elseBody = elseIfStatements;
        }
    }
    else {
        elseBody = transformStatementList_1.transformStatementList(state, getStatements_1.getStatements(elseStatement));
    }
    return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
        condition,
        statements,
        elseBody,
    });
}
exports.transformIfStatementInner = transformIfStatementInner;
function transformIfStatement(state, node) {
    return LuauAST_1.default.list.make(transformIfStatementInner(state, node));
}
exports.transformIfStatement = transformIfStatement;
//# sourceMappingURL=transformIfStatement.js.map