"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFunctionDeclaration = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformIdentifier_1 = require("../expressions/transformIdentifier");
const transformParameters_1 = require("../transformParameters");
const transformStatementList_1 = require("../transformStatementList");
const validateIdentifier_1 = require("../../util/validateIdentifier");
const wrapStatementsAsGenerator_1 = require("../../util/wrapStatementsAsGenerator");
function transformFunctionDeclaration(state, node) {
    if (!node.body) {
        return LuauAST_1.default.list.make();
    }
    const isExportDefault = !!byots_1.default.getSelectedSyntacticModifierFlags(node, byots_1.default.ModifierFlags.ExportDefault);
    assert_1.assert(node.name || isExportDefault);
    if (node.name) {
        validateIdentifier_1.validateIdentifier(state, node.name);
    }
    const name = node.name ? transformIdentifier_1.transformIdentifierDefined(state, node.name) : LuauAST_1.default.id("default");
    let { statements, parameters, hasDotDotDot } = transformParameters_1.transformParameters(state, node);
    LuauAST_1.default.list.pushList(statements, transformStatementList_1.transformStatementList(state, node.body.statements));
    let localize = isExportDefault;
    if (node.name) {
        const symbol = state.typeChecker.getSymbolAtLocation(node.name);
        assert_1.assert(symbol);
        localize = state.isHoisted.get(symbol) !== true;
    }
    const isAsync = !!byots_1.default.getSelectedSyntacticModifierFlags(node, byots_1.default.ModifierFlags.Async);
    if (node.asteriskToken) {
        if (isAsync) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noAsyncGeneratorFunctions(node));
        }
        statements = wrapStatementsAsGenerator_1.wrapStatementsAsGenerator(state, node, statements);
    }
    if (isAsync) {
        const right = LuauAST_1.default.call(state.TS(node, "async"), [
            LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.FunctionExpression, {
                hasDotDotDot,
                parameters,
                statements,
            }),
        ]);
        if (localize) {
            return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
                left: name,
                right,
            }));
        }
        else {
            return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                left: name,
                operator: "=",
                right,
            }));
        }
    }
    else {
        return LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.FunctionDeclaration, { localize, name, statements, parameters, hasDotDotDot }));
    }
}
exports.transformFunctionDeclaration = transformFunctionDeclaration;
//# sourceMappingURL=transformFunctionDeclaration.js.map