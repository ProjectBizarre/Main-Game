"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformImportDeclaration = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const Lazy_1 = require("../../../Shared/classes/Lazy");
const assert_1 = require("../../../Shared/util/assert");
const transformVariableStatement_1 = require("./transformVariableStatement");
const cleanModuleName_1 = require("../../util/cleanModuleName");
const createImportExpression_1 = require("../../util/createImportExpression");
const getSourceFileFromModuleSpecifier_1 = require("../../util/getSourceFileFromModuleSpecifier");
const isSymbolOfValue_1 = require("../../util/isSymbolOfValue");
function countImportExpUses(state, importClause) {
    let uses = 0;
    if (importClause.name) {
        const symbol = state.getOriginalSymbol(importClause.name);
        if (state.resolver.isReferencedAliasDeclaration(importClause) && (!symbol || isSymbolOfValue_1.isSymbolOfValue(symbol))) {
            uses++;
        }
    }
    if (importClause.namedBindings) {
        if (byots_1.default.isNamespaceImport(importClause.namedBindings)) {
            uses++;
        }
        else {
            for (const element of importClause.namedBindings.elements) {
                const symbol = state.getOriginalSymbol(element.name);
                if (state.resolver.isReferencedAliasDeclaration(element) && (!symbol || isSymbolOfValue_1.isSymbolOfValue(symbol))) {
                    uses++;
                }
            }
        }
    }
    return uses;
}
function transformImportDeclaration(state, node) {
    var _a;
    const importClause = node.importClause;
    if (importClause && importClause.isTypeOnly)
        return LuauAST_1.default.list.make();
    const statements = LuauAST_1.default.list.make();
    assert_1.assert(byots_1.default.isStringLiteral(node.moduleSpecifier));
    const importExp = new Lazy_1.Lazy(() => createImportExpression_1.createImportExpression(state, node.getSourceFile(), node.moduleSpecifier));
    if (importClause) {
        const uses = countImportExpUses(state, importClause);
        if (uses > 1) {
            const moduleName = node.moduleSpecifier.text.split("/");
            const id = LuauAST_1.default.tempId(cleanModuleName_1.cleanModuleName(moduleName[moduleName.length - 1]));
            LuauAST_1.default.list.push(statements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
                left: id,
                right: importExp.get(),
            }));
            importExp.set(id);
        }
        if (importClause.name) {
            const symbol = state.getOriginalSymbol(importClause.name);
            if (state.resolver.isReferencedAliasDeclaration(importClause) && (!symbol || isSymbolOfValue_1.isSymbolOfValue(symbol))) {
                const moduleFile = getSourceFileFromModuleSpecifier_1.getSourceFileFromModuleSpecifier(state.typeChecker, node.moduleSpecifier);
                const moduleSymbol = moduleFile && state.typeChecker.getSymbolAtLocation(moduleFile);
                if (moduleSymbol && state.getModuleExports(moduleSymbol).some(v => v.name === "default")) {
                    LuauAST_1.default.list.pushList(statements, transformVariableStatement_1.transformVariable(state, importClause.name, LuauAST_1.default.property(importExp.get(), "default"))[1]);
                }
                else {
                    LuauAST_1.default.list.pushList(statements, transformVariableStatement_1.transformVariable(state, importClause.name, importExp.get())[1]);
                }
            }
        }
        if (importClause.namedBindings) {
            if (byots_1.default.isNamespaceImport(importClause.namedBindings)) {
                LuauAST_1.default.list.pushList(statements, transformVariableStatement_1.transformVariable(state, importClause.namedBindings.name, importExp.get())[1]);
            }
            else {
                for (const element of importClause.namedBindings.elements) {
                    const symbol = state.getOriginalSymbol(element.name);
                    if (state.resolver.isReferencedAliasDeclaration(element) && (!symbol || isSymbolOfValue_1.isSymbolOfValue(symbol))) {
                        LuauAST_1.default.list.pushList(statements, transformVariableStatement_1.transformVariable(state, element.name, LuauAST_1.default.property(importExp.get(), ((_a = element.propertyName) !== null && _a !== void 0 ? _a : element.name).text))[1]);
                    }
                }
            }
        }
    }
    if (!importClause ||
        (state.compilerOptions.importsNotUsedAsValues === byots_1.default.ImportsNotUsedAsValues.Preserve &&
            LuauAST_1.default.list.isEmpty(statements))) {
        const expression = importExp.get();
        if (LuauAST_1.default.isCallExpression(expression)) {
            LuauAST_1.default.list.push(statements, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.CallStatement, { expression }));
        }
    }
    return statements;
}
exports.transformImportDeclaration = transformImportDeclaration;
//# sourceMappingURL=transformImportDeclaration.js.map