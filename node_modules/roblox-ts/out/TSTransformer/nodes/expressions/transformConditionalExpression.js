"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformConditionalExpression = void 0;
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const transformExpression_1 = require("./transformExpression");
const createTruthinessChecks_1 = require("../../util/createTruthinessChecks");
const types_1 = require("../../util/types");
function transformConditionalExpression(state, node) {
    const condition = transformExpression_1.transformExpression(state, node.condition);
    const [whenTrue, whenTruePrereqs] = state.capture(() => transformExpression_1.transformExpression(state, node.whenTrue));
    const [whenFalse, whenFalsePrereqs] = state.capture(() => transformExpression_1.transformExpression(state, node.whenFalse));
    const type = state.getType(node.whenTrue);
    if (!types_1.isPossiblyType(type, t => types_1.isBooleanLiteralType(state, t, false)) &&
        !types_1.isPossiblyType(type, t => types_1.isUndefinedType(t)) &&
        LuauAST_1.default.list.isEmpty(whenTruePrereqs) &&
        LuauAST_1.default.list.isEmpty(whenFalsePrereqs)) {
        return LuauAST_1.default.binary(LuauAST_1.default.binary(createTruthinessChecks_1.createTruthinessChecks(state, condition, node.condition, state.getType(node.condition)), "and", whenTrue), "or", whenFalse);
    }
    const tempId = LuauAST_1.default.tempId("result");
    state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
        left: tempId,
        right: undefined,
    }));
    LuauAST_1.default.list.push(whenTruePrereqs, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
        left: tempId,
        operator: "=",
        right: whenTrue,
    }));
    LuauAST_1.default.list.push(whenFalsePrereqs, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
        left: tempId,
        operator: "=",
        right: whenFalse,
    }));
    state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
        condition,
        statements: whenTruePrereqs,
        elseBody: whenFalsePrereqs,
    }));
    return tempId;
}
exports.transformConditionalExpression = transformConditionalExpression;
//# sourceMappingURL=transformConditionalExpression.js.map