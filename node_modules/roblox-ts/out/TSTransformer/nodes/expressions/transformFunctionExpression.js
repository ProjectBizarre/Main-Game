"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFunctionExpression = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformReturnStatement_1 = require("../statements/transformReturnStatement");
const transformParameters_1 = require("../transformParameters");
const transformStatementList_1 = require("../transformStatementList");
const wrapStatementsAsGenerator_1 = require("../../util/wrapStatementsAsGenerator");
function transformFunctionExpression(state, node) {
    if (node.name) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noFunctionExpressionName(node.name));
    }
    let { statements, parameters, hasDotDotDot } = transformParameters_1.transformParameters(state, node);
    const body = node.body;
    if (byots_1.default.isFunctionBody(body)) {
        LuauAST_1.default.list.pushList(statements, transformStatementList_1.transformStatementList(state, body.statements));
    }
    else {
        const [returnStatement, prereqs] = state.capture(() => transformReturnStatement_1.transformReturnStatementInner(state, body));
        LuauAST_1.default.list.pushList(statements, prereqs);
        LuauAST_1.default.list.push(statements, returnStatement);
    }
    const isAsync = !!byots_1.default.getSelectedSyntacticModifierFlags(node, byots_1.default.ModifierFlags.Async);
    if (node.asteriskToken) {
        if (isAsync) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noAsyncGeneratorFunctions(node));
        }
        statements = wrapStatementsAsGenerator_1.wrapStatementsAsGenerator(state, node, statements);
    }
    let expression = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.FunctionExpression, {
        hasDotDotDot,
        parameters,
        statements,
    });
    if (isAsync) {
        expression = LuauAST_1.default.call(state.TS(node, "async"), [expression]);
    }
    return expression;
}
exports.transformFunctionExpression = transformFunctionExpression;
//# sourceMappingURL=transformFunctionExpression.js.map