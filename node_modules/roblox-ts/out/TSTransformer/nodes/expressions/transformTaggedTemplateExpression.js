"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformTaggedTemplateExpression = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const transformExpression_1 = require("./transformExpression");
const convertToIndexableExpression_1 = require("../../util/convertToIndexableExpression");
const ensureTransformOrder_1 = require("../../util/ensureTransformOrder");
function transformTaggedTemplateExpression(state, node) {
    const tagExp = transformExpression_1.transformExpression(state, node.tag);
    if (byots_1.default.isTemplateExpression(node.template)) {
        const strings = new Array();
        strings.push(LuauAST_1.default.string(node.template.head.text));
        for (const templateSpan of node.template.templateSpans) {
            strings.push(LuauAST_1.default.string(templateSpan.literal.text));
        }
        const expressions = ensureTransformOrder_1.ensureTransformOrder(state, node.template.templateSpans.map(templateSpan => templateSpan.expression));
        return LuauAST_1.default.call(convertToIndexableExpression_1.convertToIndexableExpression(tagExp), [LuauAST_1.default.array(strings), ...expressions]);
    }
    else {
        return LuauAST_1.default.call(convertToIndexableExpression_1.convertToIndexableExpression(tagExp), [LuauAST_1.default.array([LuauAST_1.default.string(node.template.text)])]);
    }
}
exports.transformTaggedTemplateExpression = transformTaggedTemplateExpression;
//# sourceMappingURL=transformTaggedTemplateExpression.js.map