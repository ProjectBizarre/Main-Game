"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformYieldExpression = void 0;
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const transformExpression_1 = require("./transformExpression");
const convertToIndexableExpression_1 = require("../../util/convertToIndexableExpression");
function transformYieldExpression(state, node) {
    if (!node.expression) {
        return LuauAST_1.default.call(LuauAST_1.default.globals.coroutine.yield, []);
    }
    const expression = transformExpression_1.transformExpression(state, node.expression);
    if (node.asteriskToken) {
        const loopId = LuauAST_1.default.tempId("result");
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
            ids: LuauAST_1.default.list.make(loopId),
            expression: LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(expression), "next"),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
                condition: LuauAST_1.default.property(loopId, "done"),
                statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.BreakStatement, {})),
                elseBody: LuauAST_1.default.list.make(),
            }), LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.CallStatement, {
                expression: LuauAST_1.default.call(LuauAST_1.default.globals.coroutine.yield, [LuauAST_1.default.property(loopId, "value")]),
            })),
        }));
        return LuauAST_1.default.nil();
    }
    else {
        return LuauAST_1.default.call(LuauAST_1.default.globals.coroutine.yield, [expression]);
    }
}
exports.transformYieldExpression = transformYieldExpression;
//# sourceMappingURL=transformYieldExpression.js.map