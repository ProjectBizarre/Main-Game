"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformCallExpression = exports.transformElementCallExpressionInner = exports.transformPropertyCallExpressionInner = exports.transformCallExpressionInner = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformExpression_1 = require("./transformExpression");
const transformImportExpression_1 = require("./transformImportExpression");
const transformOptionalChain_1 = require("../transformOptionalChain");
const addOneIfArrayType_1 = require("../../util/addOneIfArrayType");
const convertToIndexableExpression_1 = require("../../util/convertToIndexableExpression");
const ensureTransformOrder_1 = require("../../util/ensureTransformOrder");
const expressionMightMutate_1 = require("../../util/expressionMightMutate");
const extendsRoactComponent_1 = require("../../util/extendsRoactComponent");
const isMethod_1 = require("../../util/isMethod");
const traversal_1 = require("../../util/traversal");
const types_1 = require("../../util/types");
const validateNotAny_1 = require("../../util/validateNotAny");
const valueToIdStr_1 = require("../../util/valueToIdStr");
const wrapReturnIfLuaTuple_1 = require("../../util/wrapReturnIfLuaTuple");
function runCallMacro(macro, state, node, expression, nodeArguments) {
    let args;
    const prereqs = state.capturePrereqs(() => {
        args = ensureTransformOrder_1.ensureTransformOrder(state, nodeArguments);
        const lastArg = nodeArguments[nodeArguments.length - 1];
        if (lastArg && byots_1.default.isSpreadElement(lastArg)) {
            const signature = state.typeChecker.getSignaturesOfType(state.getType(node.expression), byots_1.default.SignatureKind.Call)[0];
            const lastParameter = signature.parameters[signature.parameters.length - 1].valueDeclaration;
            if (lastParameter && byots_1.default.isParameter(lastParameter) && lastParameter.dotDotDotToken) {
                DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noVarArgsMacroSpread(lastArg));
                return;
            }
            const minArgumentCount = signature.minArgumentCount;
            const spread = args.pop();
            const tempIds = LuauAST_1.default.list.make();
            for (let i = args.length; i < minArgumentCount; i++) {
                const tempId = LuauAST_1.default.tempId(`spread${i}`);
                args.push(tempId);
                LuauAST_1.default.list.push(tempIds, tempId);
            }
            state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
                left: tempIds,
                right: spread,
            }));
        }
        for (let i = 0; i < args.length; i++) {
            if (expressionMightMutate_1.expressionMightMutate(state, args[i], nodeArguments[i])) {
                args[i] = state.pushToVar(args[i], valueToIdStr_1.valueToIdStr(args[i]) || `arg${i}`);
            }
        }
    });
    let nodeExpression = node.expression;
    if (byots_1.default.isPropertyAccessExpression(nodeExpression) || byots_1.default.isElementAccessExpression(nodeExpression)) {
        nodeExpression = nodeExpression.expression;
    }
    if (!LuauAST_1.default.list.isEmpty(prereqs) && expressionMightMutate_1.expressionMightMutate(state, expression, nodeExpression)) {
        expression = state.pushToVar(expression, valueToIdStr_1.valueToIdStr(expression) || "exp");
    }
    state.prereqList(prereqs);
    return wrapReturnIfLuaTuple_1.wrapReturnIfLuaTuple(state, node, macro(state, node, expression, args));
}
function isInsideRoactComponent(state, node) {
    const classLikeAncestor = traversal_1.getAncestor(node, byots_1.default.isClassLike);
    if (classLikeAncestor) {
        return extendsRoactComponent_1.extendsRoactComponent(state, classLikeAncestor);
    }
    return false;
}
function transformCallExpressionInner(state, node, expression, nodeArguments) {
    if (byots_1.default.isImportCall(node)) {
        return transformImportExpression_1.transformImportExpression(state, node);
    }
    validateNotAny_1.validateNotAnyType(state, node.expression);
    if (byots_1.default.isSuperCall(node)) {
        if (isInsideRoactComponent(state, node)) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSuperConstructorRoactComponent(node));
        }
        return LuauAST_1.default.call(LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(expression), "constructor"), [
            LuauAST_1.default.globals.self,
            ...ensureTransformOrder_1.ensureTransformOrder(state, node.arguments),
        ]);
    }
    const expType = state.typeChecker.getNonOptionalType(state.getType(node.expression));
    const symbol = types_1.getFirstDefinedSymbol(state, expType);
    if (symbol) {
        const macro = state.services.macroManager.getCallMacro(symbol);
        if (macro) {
            return runCallMacro(macro, state, node, expression, nodeArguments);
        }
    }
    let args;
    const prereqs = state.capturePrereqs(() => (args = ensureTransformOrder_1.ensureTransformOrder(state, nodeArguments)));
    if (!LuauAST_1.default.list.isEmpty(prereqs) && expressionMightMutate_1.expressionMightMutate(state, expression, node.expression)) {
        expression = state.pushToVar(expression, "exp");
    }
    state.prereqList(prereqs);
    const exp = LuauAST_1.default.call(convertToIndexableExpression_1.convertToIndexableExpression(expression), args);
    return wrapReturnIfLuaTuple_1.wrapReturnIfLuaTuple(state, node, exp);
}
exports.transformCallExpressionInner = transformCallExpressionInner;
function transformPropertyCallExpressionInner(state, node, expression, baseExpression, name, nodeArguments) {
    validateNotAny_1.validateNotAnyType(state, node.expression);
    if (byots_1.default.isSuperProperty(expression)) {
        if (isInsideRoactComponent(state, node)) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSuperPropertyCallRoactComponent(node));
        }
        return LuauAST_1.default.call(LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(baseExpression), expression.name.text), [
            LuauAST_1.default.globals.self,
            ...ensureTransformOrder_1.ensureTransformOrder(state, node.arguments),
        ]);
    }
    const expType = state.typeChecker.getNonOptionalType(state.getType(node.expression));
    const symbol = types_1.getFirstDefinedSymbol(state, expType);
    if (symbol) {
        const macro = state.services.macroManager.getPropertyCallMacro(symbol);
        if (macro) {
            return runCallMacro(macro, state, node, baseExpression, nodeArguments);
        }
    }
    let args;
    const prereqs = state.capturePrereqs(() => (args = ensureTransformOrder_1.ensureTransformOrder(state, nodeArguments)));
    if (!LuauAST_1.default.list.isEmpty(prereqs) && expressionMightMutate_1.expressionMightMutate(state, baseExpression, node.expression)) {
        baseExpression = state.pushToVar(baseExpression, "fn");
    }
    state.prereqList(prereqs);
    let exp;
    if (isMethod_1.isMethod(state, expression)) {
        if (LuauAST_1.default.isValidIdentifier(name)) {
            exp = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.MethodCallExpression, {
                name,
                expression: convertToIndexableExpression_1.convertToIndexableExpression(baseExpression),
                args: LuauAST_1.default.list.make(...args),
            });
        }
        else {
            baseExpression = state.pushToVarIfComplex(baseExpression, "fn");
            args.unshift(baseExpression);
            exp = LuauAST_1.default.call(LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(baseExpression), name), args);
        }
    }
    else {
        exp = LuauAST_1.default.call(LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(baseExpression), name), args);
    }
    return wrapReturnIfLuaTuple_1.wrapReturnIfLuaTuple(state, node, exp);
}
exports.transformPropertyCallExpressionInner = transformPropertyCallExpressionInner;
function transformElementCallExpressionInner(state, node, expression, baseExpression, argumentExpression, nodeArguments) {
    validateNotAny_1.validateNotAnyType(state, node.expression);
    if (byots_1.default.isSuperProperty(expression)) {
        if (isInsideRoactComponent(state, node)) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSuperPropertyCallRoactComponent(node));
        }
        return LuauAST_1.default.call(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
            expression: convertToIndexableExpression_1.convertToIndexableExpression(baseExpression),
            index: transformExpression_1.transformExpression(state, expression.argumentExpression),
        }), [LuauAST_1.default.globals.self, ...ensureTransformOrder_1.ensureTransformOrder(state, node.arguments)]);
    }
    const expType = state.typeChecker.getNonOptionalType(state.getType(node.expression));
    const symbol = types_1.getFirstDefinedSymbol(state, expType);
    if (symbol) {
        const macro = state.services.macroManager.getPropertyCallMacro(symbol);
        if (macro) {
            return runCallMacro(macro, state, node, baseExpression, nodeArguments);
        }
    }
    let args;
    const prereqs = state.capturePrereqs(() => (args = ensureTransformOrder_1.ensureTransformOrder(state, [argumentExpression, ...nodeArguments])));
    if (!LuauAST_1.default.list.isEmpty(prereqs) && expressionMightMutate_1.expressionMightMutate(state, baseExpression, node.expression)) {
        baseExpression = state.pushToVar(baseExpression, "fn");
    }
    state.prereqList(prereqs);
    const argumentExp = args.shift();
    if (isMethod_1.isMethod(state, expression)) {
        baseExpression = state.pushToVarIfComplex(baseExpression, "fn");
        args.unshift(baseExpression);
    }
    const exp = LuauAST_1.default.call(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
        expression: convertToIndexableExpression_1.convertToIndexableExpression(baseExpression),
        index: addOneIfArrayType_1.addOneIfArrayType(state, state.typeChecker.getNonOptionalType(state.getType(expression.expression)), argumentExp),
    }), args);
    return wrapReturnIfLuaTuple_1.wrapReturnIfLuaTuple(state, node, exp);
}
exports.transformElementCallExpressionInner = transformElementCallExpressionInner;
function transformCallExpression(state, node) {
    return transformOptionalChain_1.transformOptionalChain(state, node);
}
exports.transformCallExpression = transformCallExpression;
//# sourceMappingURL=transformCallExpression.js.map