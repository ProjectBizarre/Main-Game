"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPropertyAccessExpression = exports.transformPropertyAccessExpressionInner = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformOptionalChain_1 = require("../transformOptionalChain");
const convertToIndexableExpression_1 = require("../../util/convertToIndexableExpression");
const isMethod_1 = require("../../util/isMethod");
const isValidMethodIndexWithoutCall_1 = require("../../util/isValidMethodIndexWithoutCall");
const traversal_1 = require("../../util/traversal");
const types_1 = require("../../util/types");
const validateNotAny_1 = require("../../util/validateNotAny");
function transformPropertyAccessExpressionInner(state, node, expression, name) {
    validateNotAny_1.validateNotAnyType(state, node.expression);
    const expType = state.typeChecker.getNonOptionalType(state.getType(node));
    const symbol = types_1.getFirstDefinedSymbol(state, expType);
    if (symbol) {
        if (state.services.macroManager.getPropertyCallMacro(symbol)) {
            DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noMacroWithoutCall(node));
            return LuauAST_1.default.emptyId();
        }
    }
    const parent = traversal_1.skipUpwards(node).parent;
    if (!isValidMethodIndexWithoutCall_1.isValidMethodIndexWithoutCall(parent) && isMethod_1.isMethod(state, node)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noIndexWithoutCall(node));
        return LuauAST_1.default.emptyId();
    }
    if (byots_1.default.isPrototypeAccess(node)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noPrototype(node));
    }
    const constantValue = state.typeChecker.getConstantValue(node);
    if (constantValue !== undefined) {
        return typeof constantValue === "string" ? LuauAST_1.default.string(constantValue) : LuauAST_1.default.number(constantValue);
    }
    if (byots_1.default.isDeleteExpression(parent)) {
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(expression), name),
            operator: "=",
            right: LuauAST_1.default.nil(),
        }));
        return LuauAST_1.default.nil();
    }
    return LuauAST_1.default.property(convertToIndexableExpression_1.convertToIndexableExpression(expression), name);
}
exports.transformPropertyAccessExpressionInner = transformPropertyAccessExpressionInner;
function transformPropertyAccessExpression(state, node) {
    if (byots_1.default.isSuperProperty(node)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noSuperProperty(node));
        return LuauAST_1.default.emptyId();
    }
    return transformOptionalChain_1.transformOptionalChain(state, node);
}
exports.transformPropertyAccessExpression = transformPropertyAccessExpression;
//# sourceMappingURL=transformPropertyAccessExpression.js.map