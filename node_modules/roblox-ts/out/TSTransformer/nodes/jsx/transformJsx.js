"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformJsx = exports.transformJsxFragmentShorthand = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const RoactSymbolManager_1 = require("../../classes/RoactSymbolManager");
const transformExpression_1 = require("../expressions/transformExpression");
const transformJsxAttributes_1 = require("./transformJsxAttributes");
const transformJsxChildren_1 = require("./transformJsxChildren");
const transformJsxTagName_1 = require("./transformJsxTagName");
const createRoactIndex_1 = require("../../util/jsx/createRoactIndex");
const getKeyAttributeInitializer_1 = require("../../util/jsx/getKeyAttributeInitializer");
const pointer_1 = require("../../util/pointer");
function transformJsxFragmentShorthand(state, children) {
    const childrenPtr = pointer_1.createMixedTablePointer();
    transformJsxChildren_1.transformJsxChildren(state, children, pointer_1.createMapPointer(), childrenPtr);
    const args = new Array();
    if (LuauAST_1.default.isAnyIdentifier(childrenPtr.value) || !LuauAST_1.default.list.isEmpty(childrenPtr.value.fields)) {
        args.push(childrenPtr.value);
    }
    return LuauAST_1.default.call(createRoactIndex_1.createRoactIndex("createFragment"), args);
}
exports.transformJsxFragmentShorthand = transformJsxFragmentShorthand;
function transformJsx(state, node, tagName, attributes, children) {
    const isFragment = state.services.roactSymbolManager &&
        state.typeChecker.getSymbolAtLocation(tagName) ===
            state.services.roactSymbolManager.getSymbolOrThrow(RoactSymbolManager_1.ROACT_SYMBOL_NAMES.Fragment);
    const tagNameExp = !isFragment ? transformJsxTagName_1.transformJsxTagName(state, tagName) : LuauAST_1.default.emptyId();
    const attributesPtr = pointer_1.createMapPointer();
    const childrenPtr = pointer_1.createMixedTablePointer();
    transformJsxAttributes_1.transformJsxAttributes(state, attributes, attributesPtr);
    transformJsxChildren_1.transformJsxChildren(state, children, attributesPtr, childrenPtr);
    const args = new Array();
    if (!isFragment) {
        args.push(tagNameExp);
    }
    const pushAttributes = LuauAST_1.default.isAnyIdentifier(attributesPtr.value) || !LuauAST_1.default.list.isEmpty(attributesPtr.value.fields);
    const pushChildren = LuauAST_1.default.isAnyIdentifier(childrenPtr.value) || !LuauAST_1.default.list.isEmpty(childrenPtr.value.fields);
    if (!isFragment && (pushAttributes || pushChildren)) {
        args.push(attributesPtr.value);
    }
    if (pushChildren) {
        args.push(childrenPtr.value);
    }
    let result = LuauAST_1.default.call(isFragment ? createRoactIndex_1.createRoactIndex("createFragment") : createRoactIndex_1.createRoactIndex("createElement"), args);
    if (!byots_1.default.isJsxElement(node.parent)) {
        const keyInitializer = getKeyAttributeInitializer_1.getKeyAttributeInitializer(node);
        if (keyInitializer) {
            const [key, keyPrereqs] = state.capture(() => transformExpression_1.transformExpression(state, keyInitializer));
            state.prereqList(keyPrereqs);
            result = LuauAST_1.default.call(createRoactIndex_1.createRoactIndex("createFragment"), [LuauAST_1.default.map([[key, result]])]);
        }
    }
    return result;
}
exports.transformJsx = transformJsx;
//# sourceMappingURL=transformJsx.js.map