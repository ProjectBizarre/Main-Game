"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformJsxAttributes = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../../LuauAST"));
const assert_1 = require("../../../Shared/util/assert");
const transformExpression_1 = require("../expressions/transformExpression");
const constants_1 = require("../../util/jsx/constants");
const createRoactIndex_1 = require("../../util/jsx/createRoactIndex");
const pointer_1 = require("../../util/pointer");
const types_1 = require("../../util/types");
function transformJsxInitializer(state, initializer) {
    if (initializer && byots_1.default.isJsxExpression(initializer)) {
        initializer = initializer.expression;
    }
    if (initializer) {
        return state.capture(() => transformExpression_1.transformExpression(state, initializer));
    }
    else {
        return [LuauAST_1.default.bool(true), LuauAST_1.default.list.make()];
    }
}
function createJsxAttributeLoop(state, attributesPtrValue, expression, type) {
    const possiblyUndefined = types_1.isPossiblyType(type, t => types_1.isUndefinedType(t));
    if (possiblyUndefined) {
        expression = state.pushToVarIfComplex(expression, "exp");
    }
    const keyId = LuauAST_1.default.tempId("k");
    const valueId = LuauAST_1.default.tempId("v");
    let statement = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
        ids: LuauAST_1.default.list.make(keyId, valueId),
        expression: LuauAST_1.default.call(LuauAST_1.default.globals.pairs, [expression]),
        statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
            left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                expression: attributesPtrValue,
                index: keyId,
            }),
            operator: "=",
            right: valueId,
        })),
    });
    if (possiblyUndefined) {
        statement = LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
            condition: expression,
            statements: LuauAST_1.default.list.make(statement),
            elseBody: LuauAST_1.default.list.make(),
        });
    }
    return statement;
}
function isFlatObject(expression) {
    for (const property of expression.properties) {
        if (!byots_1.default.isPropertyAssignment(property) || !byots_1.default.isIdentifier(property.name)) {
            return false;
        }
    }
    return true;
}
function transformSpecialAttribute(state, attribute, attributesPtr) {
    assert_1.assert(attribute.initializer && byots_1.default.isJsxExpression(attribute.initializer) && attribute.initializer.expression);
    const expression = attribute.initializer.expression;
    if (byots_1.default.isObjectLiteralExpression(expression) && isFlatObject(expression)) {
        for (const property of expression.properties) {
            assert_1.assert(byots_1.default.isPropertyAssignment(property) && byots_1.default.isIdentifier(property.name));
            const [init, initPrereqs] = transformJsxInitializer(state, property.initializer);
            if (!LuauAST_1.default.list.isEmpty(initPrereqs)) {
                pointer_1.disableMapInline(state, attributesPtr);
            }
            state.prereqList(initPrereqs);
            pointer_1.assignToMapPointer(state, attributesPtr, createRoactIndex_1.createRoactIndex(attribute.name.text, property.name.text), init);
        }
    }
    else {
        pointer_1.disableMapInline(state, attributesPtr);
        const init = transformExpression_1.transformExpression(state, expression);
        const keyId = LuauAST_1.default.tempId("k");
        const valueId = LuauAST_1.default.tempId("v");
        state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ForStatement, {
            ids: LuauAST_1.default.list.make(keyId, valueId),
            expression: LuauAST_1.default.call(LuauAST_1.default.globals.pairs, [init]),
            statements: LuauAST_1.default.list.make(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
                left: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                    expression: attributesPtr.value,
                    index: LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
                        expression: createRoactIndex_1.createRoactIndex(attribute.name.text),
                        index: keyId,
                    }),
                }),
                operator: "=",
                right: valueId,
            })),
        }));
    }
}
function transformJsxAttribute(state, attribute, attributesPtr) {
    const attributeName = attribute.name.text;
    if (attributeName === constants_1.KEY_ATTRIBUTE_NAME)
        return;
    if (attributeName === constants_1.EVENT_ATTRIBUTE_NAME || attributeName === constants_1.CHANGE_ATTRIBUTE_NAME) {
        transformSpecialAttribute(state, attribute, attributesPtr);
        return;
    }
    const [init, initPrereqs] = transformJsxInitializer(state, attribute.initializer);
    if (!LuauAST_1.default.list.isEmpty(initPrereqs)) {
        pointer_1.disableMapInline(state, attributesPtr);
        state.prereqList(initPrereqs);
    }
    const name = attributeName === constants_1.REF_ATTRIBUTE_NAME ? createRoactIndex_1.createRoactIndex(constants_1.REF_ATTRIBUTE_NAME) : LuauAST_1.default.string(attributeName);
    pointer_1.assignToMapPointer(state, attributesPtr, name, init);
}
function transformJsxAttributes(state, attributes, attributesPtr) {
    for (const attribute of attributes.properties) {
        if (byots_1.default.isJsxAttribute(attribute)) {
            transformJsxAttribute(state, attribute, attributesPtr);
        }
        else {
            pointer_1.disableMapInline(state, attributesPtr);
            const expression = transformExpression_1.transformExpression(state, attribute.expression);
            state.prereq(createJsxAttributeLoop(state, attributesPtr.value, expression, state.getType(attribute.expression)));
        }
    }
}
exports.transformJsxAttributes = transformJsxAttributes;
//# sourceMappingURL=transformJsxAttributes.js.map