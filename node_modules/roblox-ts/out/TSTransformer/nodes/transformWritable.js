"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformWritableAssignment = exports.transformWritableExpression = void 0;
const byots_1 = __importDefault(require("byots"));
const LuauAST_1 = __importDefault(require("../../LuauAST"));
const diagnostics_1 = require("../../Shared/diagnostics");
const assert_1 = require("../../Shared/util/assert");
const DiagnosticService_1 = require("../classes/DiagnosticService");
const transformExpression_1 = require("./expressions/transformExpression");
const addOneIfArrayType_1 = require("../util/addOneIfArrayType");
const convertToIndexableExpression_1 = require("../util/convertToIndexableExpression");
const ensureTransformOrder_1 = require("../util/ensureTransformOrder");
const traversal_1 = require("../util/traversal");
function transformWritableExpression(state, node, readAfterWrite) {
    if (byots_1.default.isPrototypeAccess(node)) {
        DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noPrototype(node));
    }
    if (byots_1.default.isPropertyAccessExpression(node)) {
        const expression = transformExpression_1.transformExpression(state, node.expression);
        return LuauAST_1.default.property(readAfterWrite ? state.pushToVarIfComplex(expression, "exp") : convertToIndexableExpression_1.convertToIndexableExpression(expression), node.name.text);
    }
    else if (byots_1.default.isElementAccessExpression(node)) {
        const [expression, index] = ensureTransformOrder_1.ensureTransformOrder(state, [node.expression, node.argumentExpression]);
        const indexExp = addOneIfArrayType_1.addOneIfArrayType(state, state.getType(node.expression), index);
        return LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.ComputedIndexExpression, {
            expression: readAfterWrite
                ? state.pushToVarIfComplex(expression, "exp")
                : convertToIndexableExpression_1.convertToIndexableExpression(expression),
            index: readAfterWrite ? state.pushToVarIfComplex(indexExp, "index") : indexExp,
        });
    }
    else {
        const transformed = transformExpression_1.transformExpression(state, traversal_1.skipDownwards(node));
        assert_1.assert(LuauAST_1.default.isWritableExpression(transformed));
        return transformed;
    }
}
exports.transformWritableExpression = transformWritableExpression;
function transformWritableAssignment(state, writeNode, valueNode, readAfterWrite = false, readBeforeWrite = false) {
    const writable = transformWritableExpression(state, writeNode, readAfterWrite);
    const [value, prereqs] = state.capture(() => transformExpression_1.transformExpression(state, valueNode));
    const readable = !readBeforeWrite || LuauAST_1.default.list.isEmpty(prereqs) ? writable : state.pushToVar(writable, "readable");
    state.prereqList(prereqs);
    return { writable, readable, value };
}
exports.transformWritableAssignment = transformWritableAssignment;
//# sourceMappingURL=transformWritable.js.map