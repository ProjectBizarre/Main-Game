"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProjectData = void 0;
const byots_1 = __importDefault(require("byots"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const RojoResolver_1 = require("../../Shared/classes/RojoResolver");
const constants_1 = require("../../Shared/constants");
const ProjectError_1 = require("../../Shared/errors/ProjectError");
const PACKAGE_REGEX = /^@[a-z0-9-]*\//;
const DEFAULT_PROJECT_OPTIONS = {
    includePath: "",
    rojo: undefined,
    type: undefined,
};
function createProjectData(tsConfigPath, opts, flags) {
    var _a;
    const projectOptions = Object.assign({}, DEFAULT_PROJECT_OPTIONS, opts);
    const projectPath = path_1.default.dirname(tsConfigPath);
    const pkgJsonPath = byots_1.default.findPackageJson(projectPath, byots_1.default.sys);
    if (!pkgJsonPath) {
        throw new ProjectError_1.ProjectError("Unable to find package.json");
    }
    let isPackage = false;
    let pkgVersion = "";
    try {
        const pkgJson = JSON.parse(fs_extra_1.default.readFileSync(pkgJsonPath).toString());
        isPackage = PACKAGE_REGEX.test((_a = pkgJson.name) !== null && _a !== void 0 ? _a : "");
        pkgVersion = pkgJson.version;
    }
    catch (e) { }
    const logTruthyChanges = flags.logTruthyChanges;
    const noInclude = flags.noInclude;
    const includePath = path_1.default.resolve(projectOptions.includePath || path_1.default.join(projectPath, "include"));
    const nodeModulesPath = path_1.default.join(path_1.default.dirname(pkgJsonPath), constants_1.NODE_MODULES);
    let rojoConfigPath;
    if (projectOptions.rojo !== undefined) {
        if (projectOptions.rojo !== "") {
            rojoConfigPath = path_1.default.resolve(projectOptions.rojo);
        }
    }
    else {
        rojoConfigPath = RojoResolver_1.RojoResolver.findRojoConfigFilePath(projectPath);
    }
    const writeOnlyChanged = flags.writeOnlyChanged;
    const watch = flags.watch;
    return {
        tsConfigPath,
        includePath,
        isPackage,
        logTruthyChanges,
        noInclude,
        nodeModulesPath,
        pkgVersion,
        projectOptions,
        projectPath,
        rojoConfigPath,
        writeOnlyChanged,
        watch,
    };
}
exports.createProjectData = createProjectData;
//# sourceMappingURL=createProjectData.js.map